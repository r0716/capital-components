import useBalanceAccountSelection from './useBalanceAccountSelection';
import { MutableRef } from 'preact/hooks';
declare const getDefaultFilterParams: (type: 'transactions' | 'payouts' | 'reports') => {
    readonly defaultFilterParams: {
        readonly balanceAccount: undefined;
        readonly createdSince: string;
        readonly createdUntil: string;
        readonly minAmount?: undefined;
        readonly maxAmount?: undefined;
        readonly categories?: string | undefined;
        readonly currencies?: string | undefined;
        readonly statuses?: string | undefined;
    };
    readonly defaultTimeRange: "rangePreset.last30Days";
    readonly timeRangeOptions: Readonly<{
        readonly 'rangePreset.last7Days': import("../components/internal/Calendar/calendar/timerange").RangeTimestamps<{
            numberOfDays: number;
        }>;
        readonly 'rangePreset.last30Days': import("../components/internal/Calendar/calendar/timerange").RangeTimestamps<{
            numberOfDays: number;
        }>;
        readonly 'rangePreset.thisWeek': import("../components/internal/Calendar/calendar/timerange").RangeTimestamps<{
            firstWeekDay: import("../components/internal/Calendar/calendar/types").WeekDay;
        }>;
        readonly 'rangePreset.lastWeek': import("../components/internal/Calendar/calendar/timerange").RangeTimestamps<{
            firstWeekDay: import("../components/internal/Calendar/calendar/types").WeekDay;
        }>;
        readonly 'rangePreset.thisMonth': import("../components/internal/Calendar/calendar/timerange").RangeTimestamps<{}>;
        readonly 'rangePreset.lastMonth': import("../components/internal/Calendar/calendar/timerange").RangeTimestamps<{}>;
        readonly 'rangePreset.yearToDate': import("../components/internal/Calendar/calendar/timerange").RangeTimestamps<{}>;
    }>;
};
declare const useDefaultOverviewFilterParams: (filterType: Parameters<typeof getDefaultFilterParams>[0], balanceAccount?: ReturnType<typeof useBalanceAccountSelection>['activeBalanceAccount']) => {
    readonly defaultParams: MutableRef<any>;
    readonly nowTimestamp: number;
    readonly refreshNowTimestamp: () => void;
};
export default useDefaultOverviewFilterParams;
//# sourceMappingURL=useDefaultOverviewFilterParams.d.ts.map