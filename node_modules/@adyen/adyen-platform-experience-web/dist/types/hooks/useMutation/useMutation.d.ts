import { AdyenErrorResponse } from '../../core/Http/types';
type MutationOptions<ResponseType> = {
    onSuccess?: (data: ResponseType) => void | Promise<void>;
    onError?: (error: Error | AdyenErrorResponse) => void | Promise<void>;
    onSettled?: (data: ResponseType | undefined, error: Error | AdyenErrorResponse | null) => void | Promise<void>;
    retry?: number | boolean;
    retryDelay?: number | ((retryAttempt: number) => number);
    shouldRetry?: (error: AdyenErrorResponse) => boolean;
};
type MutationStatus = 'idle' | 'loading' | 'success' | 'error';
declare function useMutation<queryFn extends (...args: any[]) => any, ResponseType extends Awaited<ReturnType<queryFn>>>({ queryFn, options, }: {
    queryFn: queryFn | undefined;
    options?: MutationOptions<ResponseType>;
}): {
    data: ResponseType | null;
    error: Error | AdyenErrorResponse | null;
    status: MutationStatus;
    isIdle: boolean;
    isLoading: boolean;
    isSuccess: boolean;
    isError: boolean;
    mutate: (...variables: Parameters<queryFn>) => Promise<ResponseType>;
    reset: () => void;
};
export default useMutation;
//# sourceMappingURL=useMutation.d.ts.map