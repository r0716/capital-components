import { EndpointName } from '../../../../types/api/endpoints';
declare const useDownload: (endpointName: EndpointName, queryParam?: any, enabled?: boolean) => import("../../../../hooks/useFetch").State<{
    data: {
        defaultCurrencyCode: string;
        description?: string | undefined;
        id: string;
        timeZone: string;
    }[];
} | {
    data: {
        currency: string;
        value: number;
    }[];
} | {
    amountBreakdowns?: {
        adjustmentBreakdown?: {
            amount?: {
                currency: string;
                value: number;
            } | undefined;
            category?: string | undefined;
        }[] | undefined;
        fundsCapturedBreakdown?: {
            amount?: {
                currency: string;
                value: number;
            } | undefined;
            category?: string | undefined;
        }[] | undefined;
    } | undefined;
    payout?: {
        adjustmentAmount: {
            currency: string;
            value: number;
        };
        createdAt: string;
        fundsCapturedAmount: {
            currency: string;
            value: number;
        };
        payoutAmount: {
            currency: string;
            value: number;
        };
        unpaidAmount: {
            currency: string;
            value: number;
        };
    } | undefined;
} | {
    _links: {
        next: {
            cursor: string;
        };
        prev: {
            cursor: string;
        };
    };
    data: {
        adjustmentAmount: {
            currency: string;
            value: number;
        };
        createdAt: string;
        fundsCapturedAmount: {
            currency: string;
            value: number;
        };
        payoutAmount: {
            currency: string;
            value: number;
        };
        unpaidAmount: {
            currency: string;
            value: number;
        };
    }[];
} | {
    amount: {
        currency: string;
        value: number;
    };
    balanceAccountId: string;
    bankAccount?: {
        accountNumberLastFourDigits: string;
    } | undefined;
    category: "Other" | "Fee" | "ATM" | "Capital" | "Chargeback" | "Correction" | "Payment" | "Refund" | "Transfer";
    createdAt: string;
    deductedAmount?: {
        currency: string;
        value: number;
    } | undefined;
    id: string;
    originalAmount?: {
        currency: string;
        value: number;
    } | undefined;
    paymentMethod?: {
        lastFourDigits?: string | undefined;
        type: string;
    } | undefined;
    paymentPspReference?: string | undefined;
    refundDetails?: {
        refundLocked?: boolean | undefined;
        refundMode: "non_refundable" | "partially_refundable_with_line_items_required" | "partially_refundable_any_amount" | "fully_refundable_only";
        refundStatuses?: {
            amount: {
                currency: string;
                value: number;
            };
            status: "in_progress" | "completed" | "failed";
        }[] | undefined;
        refundableAmount?: {
            currency: string;
            value: number;
        } | undefined;
    } | undefined;
    refundMetadata?: {
        originalPaymentId: string;
        refundPspReference: string;
        refundReason?: "other" | "requested_by_customer" | "issue_with_item_sold" | "fraudulent" | "duplicate" | undefined;
        refundType: "full" | "partial";
    } | undefined;
    status: "Booked" | "Pending" | "Reversed";
} | {
    data: {
        currency: string;
        expenses: number;
        incomings: number;
    }[];
} | {
    _links: {
        next: {
            cursor: string;
        };
        prev: {
            cursor: string;
        };
    };
    data: {
        amount: {
            currency: string;
            value: number;
        };
        balanceAccountId: string;
        bankAccount?: {
            accountNumberLastFourDigits: string;
        } | undefined;
        category: "Other" | "Fee" | "ATM" | "Capital" | "Chargeback" | "Correction" | "Payment" | "Refund" | "Transfer";
        createdAt: string;
        deductedAmount?: {
            currency: string;
            value: number;
        } | undefined;
        id: string;
        originalAmount?: {
            currency: string;
            value: number;
        } | undefined;
        paymentMethod?: {
            lastFourDigits?: string | undefined;
            type: string;
        } | undefined;
        paymentPspReference?: string | undefined;
        refundDetails?: {
            refundLocked?: boolean | undefined;
            refundMode: "non_refundable" | "partially_refundable_with_line_items_required" | "partially_refundable_any_amount" | "fully_refundable_only";
            refundStatuses?: {
                amount: {
                    currency: string;
                    value: number;
                };
                status: "in_progress" | "completed" | "failed";
            }[] | undefined;
            refundableAmount?: {
                currency: string;
                value: number;
            } | undefined;
        } | undefined;
        refundMetadata?: {
            originalPaymentId: string;
            refundPspReference: string;
            refundReason?: "other" | "requested_by_customer" | "issue_with_item_sold" | "fraudulent" | "duplicate" | undefined;
            refundType: "full" | "partial";
        } | undefined;
        status: "Booked" | "Pending" | "Reversed";
    }[];
} | {
    amount: {
        currency: string;
        value: number;
    };
    refundReason?: string | undefined;
    status?: string | undefined;
} | {
    _links?: {
        next: {
            cursor: string;
        };
        prev: {
            cursor: string;
        };
    } | undefined;
    data?: {
        createdAt: string;
        type: "payout";
    }[] | undefined;
} | Uint8Array | {
    expectedRepaymentPeriodDays: number;
    feesAmount: {
        currency: string;
        value: number;
    };
    grantAmount: {
        currency: string;
        value: number;
    };
    id: string;
    maximumRepaymentPeriodDays?: number | undefined;
    repaymentRate: number;
    thresholdAmount: {
        currency: string;
        value: number;
    };
    totalAmount: {
        currency: string;
        value: number;
    };
} | {
    maxAmount: {
        currency: string;
        value: number;
    };
    minAmount: {
        currency: string;
        value: number;
    };
    step: number;
} | {
    data: {
        balanceAccountCode: string;
        balanceAccountDescription: string;
        expectedRepaymentPeriodDays: number;
        feesAmount: {
            currency: string;
            value: number;
        };
        grantAmount: {
            currency: string;
            value: number;
        };
        id: string;
        maximumRepaymentPeriodDays?: number | undefined;
        missingActions?: {
            type: "signToS";
        }[] | undefined;
        offerExpiresAt?: string | undefined;
        remainingFeesAmount: {
            currency: string;
            value: number;
        };
        remainingGrantAmount: {
            currency: string;
            value: number;
        };
        remainingTotalAmount: {
            currency: string;
            value: number;
        };
        repaidFeesAmount: {
            currency: string;
            value: number;
        };
        repaidGrantAmount: {
            currency: string;
            value: number;
        };
        repaidTotalAmount: {
            currency: string;
            value: number;
        };
        repaymentPeriodLeft: number;
        repaymentRate: number;
        status: "Failed" | "Pending" | "Repaid" | "Revoked" | "Active" | "WrittenOff";
        termEndsAt: string;
        thresholdAmount: {
            currency: string;
            value: number;
        };
        totalAmount: {
            currency: string;
            value: number;
        };
    }[];
} | {
    url: string;
}>;
export default useDownload;
//# sourceMappingURL=useDownload.d.ts.map