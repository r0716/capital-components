import TimeFrame from './TimeFrame';
import { FirstWeekDay, Month, MonthDays, Time, TimeFrameBlock, TimeFrameSelection } from '../../types';
export default class MonthFrame extends TimeFrame {
    #private;
    protected daysInWeek: number;
    protected origin: Month;
    constructor();
    protected get fromTimestamp(): number;
    protected get toTimestamp(): number;
    protected get numberOfBlocks(): number;
    get currentDayTimestamp(): number;
    get dynamicBlockHeight(): boolean;
    set dynamicBlockHeight(bool: boolean | null | undefined);
    get rowspan(): 7;
    get firstWeekDay(): FirstWeekDay;
    set firstWeekDay(day: FirstWeekDay | null | undefined);
    protected getCursorBlockOriginTimestampOffset(timestamp: number): number;
    protected getDayOfWeekAtIndex(index: number): Readonly<{
        flags: Readonly<{
            CURRENT?: 1 | undefined;
            CURSOR?: 1 | undefined;
            WEEKEND?: 1 | undefined;
            LINE_START?: 1 | undefined;
            LINE_END?: 1 | undefined;
            WITHIN_BLOCK?: 1 | undefined;
            BLOCK_START?: 1 | undefined;
            BLOCK_END?: 1 | undefined;
            WITHIN_RANGE?: 1 | undefined;
            RANGE_START?: 1 | undefined;
            RANGE_END?: 1 | undefined;
            WITHIN_SELECTION?: 1 | undefined;
            SELECTION_START?: 1 | undefined;
            SELECTION_END?: 1 | undefined;
        }>;
        labels: Readonly<{
            long: string;
            short: string;
            narrow: string;
        }>;
    }>;
    protected getEdgeBlockOffsetsFromOrigin(): [number, number];
    protected getFormattedDataForBlockCell(time: Time): [string, string];
    protected getFormattedDataForFrameBlock(time: Time): [string, string];
    protected getFrameBlockAtIndex(index: number): TimeFrameBlock;
    protected getUnitsForFrameBlockAtIndex(index: number): MonthDays;
    protected getUnitsOffsetForTimestamp(startTimestamp: number, timestamp: number): number;
    protected reoriginate(): void;
    protected reslice(): void;
    protected shiftOrigin(offset: number): void;
    clearSelection(): void;
    getTimestampAtIndex(indexOffset: number): number;
    updateSelection(time: Time, selection?: TimeFrameSelection): void;
    withCurrentDayTimestamp(): void;
}
//# sourceMappingURL=MonthFrame.d.ts.map