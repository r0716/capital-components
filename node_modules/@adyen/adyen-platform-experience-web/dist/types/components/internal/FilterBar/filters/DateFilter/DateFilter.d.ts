import { UseTimeRangeSelectionConfig } from '../../../DatePicker/components/TimeRangeSelector';
import useDefaultOverviewFilterParams from '../../../../../hooks/useDefaultOverviewFilterParams';
import { FilterParam } from '../../../../types';
import { DateFilterProps } from './types';
import { UsePaginatedRecords } from '../../../Pagination/hooks/types';
type DataOverviewDateFilterProps = Pick<UsePaginatedRecords<any, string, FilterParam>, 'canResetFilters' | 'filters' | 'updateFilters'> & ReturnType<typeof useDefaultOverviewFilterParams> & {
    timezone?: UseTimeRangeSelectionConfig['timezone'];
};
declare const DateFilter: <T extends DateFilterProps = DateFilterProps>({ timezone, canResetFilters, defaultParams, filters, nowTimestamp, refreshNowTimestamp, sinceDate, untilDate, updateFilters, }: Pick<T, "sinceDate" | "untilDate"> & Pick<UsePaginatedRecords<any, string, FilterParam>, "canResetFilters" | "filters" | "updateFilters"> & {
    readonly defaultParams: import("preact/hooks").MutableRef<any>;
    readonly nowTimestamp: number;
    readonly refreshNowTimestamp: () => void;
} & {
    timezone?: UseTimeRangeSelectionConfig['timezone'];
}) => import("preact").JSX.Element;
export default DateFilter;
//# sourceMappingURL=DateFilter.d.ts.map