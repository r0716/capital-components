import type { RestampContext } from '../../../../../core/Localization/datetime/restamper';
import type { TranslationKey } from '../../../../../translations';
import { RangeTimestamp, RangeTimestamps } from '../../../Calendar/calendar/timerange';
export type UseTimeRangeSelectionConfig = {
    now?: RangeTimestamp;
    options: Readonly<Partial<{
        [P in TranslationKey]: RangeTimestamps;
    }>>;
    selectedOption?: string;
    timezone?: RestampContext['TIMEZONE'];
};
export type UseTimeRangeSelectionData = ReturnType<typeof useTimeRangeSelection>;
export declare const getTimeRangeSelectionDefaultPresetOptions: () => Readonly<{
    readonly 'rangePreset.last7Days': RangeTimestamps<{
        numberOfDays: number;
    }>;
    readonly 'rangePreset.last30Days': RangeTimestamps<{
        numberOfDays: number;
    }>;
    readonly 'rangePreset.thisWeek': RangeTimestamps<{
        firstWeekDay: import("../../../Calendar/calendar/types").WeekDay;
    }>;
    readonly 'rangePreset.lastWeek': RangeTimestamps<{
        firstWeekDay: import("../../../Calendar/calendar/types").WeekDay;
    }>;
    readonly 'rangePreset.thisMonth': RangeTimestamps<{}>;
    readonly 'rangePreset.lastMonth': RangeTimestamps<{}>;
    readonly 'rangePreset.yearToDate': RangeTimestamps<{}>;
}>;
export declare const useTimeRangeSelection: ({ now, options: presetOptions, selectedOption: selectedPresetOption, timezone, }: UseTimeRangeSelectionConfig) => {
    readonly customSelection: () => void;
    readonly from: number | undefined;
    readonly onSelection: (option: string) => void;
    readonly options: readonly string[];
    readonly selectedOption: string | undefined;
    readonly to: number | undefined;
};
export default useTimeRangeSelection;
//# sourceMappingURL=useTimeRangeSelection.d.ts.map