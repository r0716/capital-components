import type { SelectItem, SelectItemProps } from '../types';
type _RenderSelectOptionResult<T extends SelectItem> = ReturnType<SelectItemProps<T>['renderListItem']>;
type _RenderSelectOptionData<T extends SelectItem> = Parameters<SelectItemProps<T>['renderListItem']>[0];
export declare const renderDefaultMultiSelectionCheckedness: <T extends SelectItem>(data: Pick<SelectItemProps<T>, "selected" | "item" | "multiSelect"> & {
    contentClassName?: string | import("preact/compat").JSX.SignalLike<string | undefined> | undefined;
    iconClassName?: string | import("preact/compat").JSX.SignalLike<string | undefined> | undefined;
}) => import("preact").VNode<any> | null;
export declare const renderDefaultSingleSelectionCheckedness: <T extends SelectItem>(data: Pick<SelectItemProps<T>, "selected" | "item" | "multiSelect"> & {
    contentClassName?: string | import("preact/compat").JSX.SignalLike<string | undefined> | undefined;
    iconClassName?: string | import("preact/compat").JSX.SignalLike<string | undefined> | undefined;
}) => import("preact").VNode<any> | null;
export declare const renderListItemDefault: <T extends SelectItem>(data: Pick<SelectItemProps<T>, "selected" | "item" | "multiSelect"> & {
    contentClassName?: string | import("preact/compat").JSX.SignalLike<string | undefined> | undefined;
    iconClassName?: string | import("preact/compat").JSX.SignalLike<string | undefined> | undefined;
}) => import("preact").VNode<any> | null;
declare const _default: <T extends SelectItem>({ item, multiSelect, onKeyDown, onSelect, renderListItem, selected }: SelectItemProps<T>) => import("preact/compat").JSX.Element;
export default _default;
//# sourceMappingURL=SelectListItem.d.ts.map