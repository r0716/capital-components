import './FormFields.scss';
declare const formFieldTypes: {
    readonly select: <T extends import("./Select/types").SelectItem>({ className, classNameModifiers, popoverClassNameModifiers, items, filterable, multiSelect, readonly, onChange, selected, name, isInvalid, isValid, placeholder, uniqueId, renderListItem, isCollatingErrors, setToTargetWidth, withoutCollapseIndicator, showOverlay, fitPosition, }: import("./Select/types").SelectProps<T>) => import("preact").JSX.Element;
    readonly text: import("preact").FunctionalComponent<import("preact/compat").PropsWithoutRef<import("./types").InputBaseProps> & {
        ref?: import("preact").Ref<HTMLInputElement | null> | undefined;
    }>;
    readonly default: import("preact").FunctionalComponent<import("preact/compat").PropsWithoutRef<import("./types").InputBaseProps> & {
        ref?: import("preact").Ref<HTMLInputElement | null> | undefined;
    }>;
};
type FormField = typeof formFieldTypes;
export declare const renderFormField: <T extends "select" | "text" | "default">(type: T, ...props: Parameters<{
    readonly select: <T_1 extends import("./Select/types").SelectItem>({ className, classNameModifiers, popoverClassNameModifiers, items, filterable, multiSelect, readonly, onChange, selected, name, isInvalid, isValid, placeholder, uniqueId, renderListItem, isCollatingErrors, setToTargetWidth, withoutCollapseIndicator, showOverlay, fitPosition, }: import("./Select/types").SelectProps<T_1>) => import("preact").JSX.Element;
    readonly text: import("preact").FunctionalComponent<import("preact/compat").PropsWithoutRef<import("./types").InputBaseProps> & {
        ref?: import("preact").Ref<HTMLInputElement | null> | undefined;
    }>;
    readonly default: import("preact").FunctionalComponent<import("preact/compat").PropsWithoutRef<import("./types").InputBaseProps> & {
        ref?: import("preact").Ref<HTMLInputElement | null> | undefined;
    }>;
}[T]>) => import("preact").JSX.Element;
export default renderFormField;
//# sourceMappingURL=index.d.ts.map