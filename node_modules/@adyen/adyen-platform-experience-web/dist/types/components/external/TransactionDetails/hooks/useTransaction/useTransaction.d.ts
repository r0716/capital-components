import type { TransactionDataContentProps } from '../../components/TransactionData/TransactionDataContent';
export declare const useTransaction: (initialTransaction: TransactionDataContentProps['transaction']) => {
    readonly fetchingTransaction: boolean;
    readonly refreshTransaction: () => void;
    readonly transaction: {
        amount: {
            currency: string;
            value: number;
        };
        balanceAccountId: string;
        bankAccount?: {
            accountNumberLastFourDigits: string;
        } | undefined;
        category: "Other" | "Fee" | "ATM" | "Capital" | "Chargeback" | "Correction" | "Payment" | "Refund" | "Transfer";
        createdAt: string;
        deductedAmount?: {
            currency: string;
            value: number;
        } | undefined;
        id: string;
        originalAmount?: {
            currency: string;
            value: number;
        } | undefined;
        paymentMethod?: {
            lastFourDigits?: string | undefined;
            type: string;
        } | undefined;
        paymentPspReference?: string | undefined;
        refundDetails?: {
            refundLocked?: boolean | undefined;
            refundMode: "non_refundable" | "partially_refundable_with_line_items_required" | "partially_refundable_any_amount" | "fully_refundable_only";
            refundStatuses?: {
                amount: {
                    currency: string;
                    value: number;
                };
                status: "in_progress" | "completed" | "failed";
            }[] | undefined;
            refundableAmount?: {
                currency: string;
                value: number;
            } | undefined;
        } | undefined;
        refundMetadata?: {
            originalPaymentId: string;
            refundPspReference: string;
            refundReason?: "other" | "requested_by_customer" | "issue_with_item_sold" | "fraudulent" | "duplicate" | undefined;
            refundType: "full" | "partial";
        } | undefined;
        status: "Booked" | "Pending" | "Reversed";
    } & import("../..").BalanceAccountProps & {
        lineItems?: {
            amountIncludingTax: {
                currency: string;
                value: number;
            };
            availableQuantity: number;
            description: string;
            id: string;
            originalQuantity: number;
            reference: string;
            refundStatuses: {
                quantity: number;
                status: "in_progress" | "completed" | "failed";
            }[];
            sku?: string | undefined;
        }[] | undefined;
    };
    readonly transactionNavigator: import("./transactionNavigator/types").TransactionNavigator;
};
export default useTransaction;
//# sourceMappingURL=useTransaction.d.ts.map