import AuthSession from '../../../../../../core/Auth/session/AuthSession';
import { ActiveView } from '../../types';
import type { ITransactionRefundContext, TransactionRefundProviderProps } from '../types';
import type { ITransaction } from '../../../../../../types';
type _BaseUseRefundActionProps = Pick<TransactionRefundProviderProps, 'refreshTransaction' | 'transactionId'> & Pick<ITransactionRefundContext, 'refundReason'> & {
    refundAmount: ITransaction['amount'];
    refundInProgress: boolean;
    refundTransaction: AuthSession['context']['endpoints']['initiateRefund'];
    setActiveView: (activeView: ActiveView) => void;
};
export declare const useRefundAction: <T extends _BaseUseRefundActionProps>({ refundAmount: amount, refundReason, refundInProgress, refundTransaction, setActiveView, transactionId, }: T) => {
    readonly refundAction: () => Promise<void> | undefined;
    readonly refundActionLabel: {
        title: string;
    };
};
export {};
//# sourceMappingURL=useRefundAction.d.ts.map