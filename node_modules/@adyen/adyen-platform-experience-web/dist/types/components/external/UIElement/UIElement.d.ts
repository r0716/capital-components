import { JSXInternal } from 'preact/src/jsx';
import BaseElement from '../BaseElement';
import { BaseElementProps, ExternalComponentType, IUIElement, UIElementProps, UIElementStatus } from '../../types';
import './UIElement.scss';
export declare class UIElement<P> extends BaseElement<P & UIElementProps> implements IUIElement {
    protected componentRef: UIElement<P> | null;
    componentToRender: (() => JSXInternal.Element) | null;
    elementRef: UIElement<P> | null;
    onContactSupport?: () => void;
    customClassNames: string | undefined;
    constructor(props: P & UIElementProps & BaseElementProps);
    get isValid(): boolean;
    /**
     * Get the element's displayable name
     */
    get displayName(): ExternalComponentType;
    /**
     * Get the element accessible name, used in the aria-label of the button that controls selected component
     */
    get accessibleName(): string;
    /**
     * Return the type of an element
     */
    get type(): ExternalComponentType;
    formatProps(props: P): P;
    /**
     * Formats the component data output
     */
    formatData(): {
        errors?: {
            [key: string]: any;
        } | undefined;
        valid?: {
            [key: string]: boolean;
        } | undefined;
        fieldProblems?: {
            [key: string]: any;
        } | undefined;
        isValid?: boolean | undefined;
    };
    setState(newState: Record<any, any>): void;
    private setUIElementStatus;
    setStatus(status: UIElementStatus, props: P & UIElementProps): this;
    render(): JSXInternal.Element;
}
export default UIElement;
//# sourceMappingURL=UIElement.d.ts.map