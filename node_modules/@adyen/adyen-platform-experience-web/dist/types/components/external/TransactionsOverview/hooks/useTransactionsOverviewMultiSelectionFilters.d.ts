import { ITransaction } from '../../../../types';
import { TransactionsOverviewMultiSelectionFilterParam, UseMultiSelectionFilterConfig } from '../components/MultiSelectionFilter';
declare const useTransactionsOverviewMultiSelectionFilters: (filtersConfig: Pick<UseMultiSelectionFilterConfig<TransactionsOverviewMultiSelectionFilterParam>, 'filters' | 'updateFilters'>, currencies: ITransaction['amount']['currency'][] | undefined) => {
    readonly categoriesFilter: {
        readonly selection: ("Other" | "Fee" | "ATM" | "Capital" | "Chargeback" | "Correction" | "Payment" | "Refund" | "Transfer")[];
        readonly selectionOptions: readonly import("../../../internal/FormFields/Select/types").SelectItem[] | undefined;
        readonly updateSelection: ({ target }: any) => void;
    };
    readonly currenciesFilter: {
        readonly selection: string[];
        readonly selectionOptions: readonly import("../../../internal/FormFields/Select/types").SelectItem[] | undefined;
        readonly updateSelection: ({ target }: any) => void;
    };
    readonly statusesFilter: {
        readonly selection: ("Booked" | "Pending" | "Reversed")[];
        readonly selectionOptions: readonly import("../../../internal/FormFields/Select/types").SelectItem[] | undefined;
        readonly updateSelection: ({ target }: any) => void;
    };
};
export default useTransactionsOverviewMultiSelectionFilters;
//# sourceMappingURL=useTransactionsOverviewMultiSelectionFilters.d.ts.map