import type { SelectionOptionsList, UseMultiSelectionFilterConfig, UseMultiSelectionFilterConfigWithoutValues } from './types';
export declare const useMultiSelectionFilter: <FilterParam extends string = string, FilterValue extends string = string>({ filterParam, filterValues, filters, defaultFilters, updateFilters, }: UseMultiSelectionFilterConfig<FilterParam, FilterValue>) => {
    readonly selection: FilterValue[];
    readonly selectionOptions: readonly import("../../../../../internal/FormFields/Select/types").SelectItem[] | undefined;
    readonly updateSelection: ({ target }: any) => void;
};
export declare const useMultiSelectionFilterWithoutValues: <FilterParam extends string = string, FilterValue extends string = string>(config: UseMultiSelectionFilterConfigWithoutValues<FilterParam, FilterValue>) => {
    readonly filterValues: SelectionOptionsList<FilterValue> | undefined;
    readonly updateFilterValues: import("preact/hooks").Dispatch<import("preact/hooks").StateUpdater<SelectionOptionsList<FilterValue> | undefined>>;
    readonly selection: FilterValue[];
    readonly selectionOptions: readonly import("../../../../../internal/FormFields/Select/types").SelectItem[] | undefined;
    readonly updateSelection: ({ target }: any) => void;
};
export default useMultiSelectionFilter;
//# sourceMappingURL=useMultiSelectionFilter.d.ts.map