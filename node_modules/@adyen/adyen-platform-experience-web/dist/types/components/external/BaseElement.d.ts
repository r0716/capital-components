import { ComponentChild } from 'preact';
import { BaseElementProps, BaseElementState, ExternalComponentType } from '../types';
declare class BaseElement<P> {
    static type: ExternalComponentType;
    _component: ComponentChild | Error;
    _node: Document | ShadowRoot | DocumentFragment | Element | null;
    readonly _id: string;
    defaultProps: {};
    props: P & BaseElementProps;
    state: BaseElementState;
    protected constructor(props: P & BaseElementProps);
    /**
     * Executed during creation of any element.
     * Gives a chance to any component to format the props we're receiving.
     */
    protected formatProps(props: P & BaseElementProps): any;
    /**
     * Executed on the `data` getter.
     * Returns the component data necessary for making a request
     */
    protected formatData(): {};
    protected setState(newState: object): void;
    /**
     * Returns the component data ready to submit to the Checkout API
     * Note: this does not ensure validity, check isValid first
     */
    get data(): any;
    render(): ComponentChild | Error;
    /**
     * Mounts an element into the dom
     * @param domNode - Node (or selector) where we will mount the element
     * @returns this - the element instance we mounted
     */
    mount(domNode: string): this;
    mount(domNode: HTMLElement): this;
    /**
     * Updates props, resets the internal state and remounts the element.
     * @param props - props to update
     * @returns this - the element instance
     */
    update(props: P): this;
    /**
     * Unmounts an element and mounts it again on the same node i.e. allows mount w/o having to pass a node.
     * Should be "private" & undocumented (although being a public function is useful for testing).
     * Left in for legacy reasons
     */
    remount(component: BaseElement<any>): this;
    /**
     * Unmounts an element from the DOM
     */
    unmount(): this;
    /**
     * Unmounts an element and removes it from the parent instance
     * For "destroy" type cleanup - when you don't intend to use the component again
     */
    remove(): void;
}
export default BaseElement;
//# sourceMappingURL=BaseElement.d.ts.map