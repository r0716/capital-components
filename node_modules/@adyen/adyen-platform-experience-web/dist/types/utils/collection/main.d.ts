import type { MapGetter } from './types';
import type { List } from '../types';
export declare const getMappedValue: MapGetter;
export declare const listFrom: <T extends string = string>(value?: string | any[], fallbackList?: T[]) => T[];
export declare const pickFrom: <C extends any[] | readonly any[]>(list: C, option?: C[number] | undefined, defaultOption?: C[number] | undefined) => any;
export declare const some: (thisValue: unknown, predicate: (value: any, index: number, array: any[]) => unknown, thisArg?: any) => boolean;
type _UniqueFlatten = <T>(items: List<T>, uniqueItems?: Set<T>) => Set<T>;
export declare const uniqueFlatten: _UniqueFlatten;
export declare const uniqueFlattenReversed: _UniqueFlatten;
export {};
//# sourceMappingURL=main.d.ts.map