import { AuthSession } from './session/AuthSession';
import type { AuthProviderProps } from './types';
export declare const AuthProvider: ({ children, session, type }: AuthProviderProps) => import("preact").JSX.Element;
export declare const useAuthContext: () => Readonly<{
    endpoints: {
        getBalanceAccounts?: ((options: {
            body?: any;
            origin?: string | undefined;
            signal?: AbortSignal | undefined;
            accept?: string | undefined;
            headers?: HeadersInit | undefined;
            errorMessage?: string | undefined;
            contentType?: string | undefined;
            clientKey?: string | undefined;
            errorLevel?: import("../Http/types").ErrorLevel | undefined;
            errorHandler?: ((response: any) => any) | undefined;
        }) => Promise<{
            data: {
                defaultCurrencyCode: string;
                description?: string | undefined;
                id: string;
                timeZone: string;
            }[];
        }>) | undefined;
        getBalances?: ((options: {
            body?: any;
            origin?: string | undefined;
            signal?: AbortSignal | undefined;
            accept?: string | undefined;
            headers?: HeadersInit | undefined;
            errorMessage?: string | undefined;
            contentType?: string | undefined;
            clientKey?: string | undefined;
            errorLevel?: import("../Http/types").ErrorLevel | undefined;
            errorHandler?: ((response: any) => any) | undefined;
        }, args_0: {
            path: {
                balanceAccountId: string;
            };
        }) => Promise<{
            data: {
                currency: string;
                value: number;
            }[];
        }>) | undefined;
        getPayout?: ((options: {
            body?: any;
            origin?: string | undefined;
            signal?: AbortSignal | undefined;
            accept?: string | undefined;
            headers?: HeadersInit | undefined;
            errorMessage?: string | undefined;
            contentType?: string | undefined;
            clientKey?: string | undefined;
            errorLevel?: import("../Http/types").ErrorLevel | undefined;
            errorHandler?: ((response: any) => any) | undefined;
        }, args_0: {
            query: {
                balanceAccountId: string;
                createdAt?: string | undefined;
            };
        }) => Promise<{
            amountBreakdowns?: {
                adjustmentBreakdown?: {
                    amount?: {
                        currency: string;
                        value: number;
                    } | undefined;
                    category?: string | undefined;
                }[] | undefined;
                fundsCapturedBreakdown?: {
                    amount?: {
                        currency: string;
                        value: number;
                    } | undefined;
                    category?: string | undefined;
                }[] | undefined;
            } | undefined;
            payout?: {
                adjustmentAmount: {
                    currency: string;
                    value: number;
                };
                createdAt: string;
                fundsCapturedAmount: {
                    currency: string;
                    value: number;
                };
                payoutAmount: {
                    currency: string;
                    value: number;
                };
                unpaidAmount: {
                    currency: string;
                    value: number;
                };
            } | undefined;
        }>) | undefined;
        getPayouts?: ((options: {
            body?: any;
            origin?: string | undefined;
            signal?: AbortSignal | undefined;
            accept?: string | undefined;
            headers?: HeadersInit | undefined;
            errorMessage?: string | undefined;
            contentType?: string | undefined;
            clientKey?: string | undefined;
            errorLevel?: import("../Http/types").ErrorLevel | undefined;
            errorHandler?: ((response: any) => any) | undefined;
        }, args_0: {
            query: {
                balanceAccountId: string;
                createdSince?: string | undefined;
                createdUntil?: string | undefined;
                cursor?: string | undefined;
                limit?: number | undefined;
            };
        }) => Promise<{
            _links: {
                next: {
                    cursor: string;
                };
                prev: {
                    cursor: string;
                };
            };
            data: {
                adjustmentAmount: {
                    currency: string;
                    value: number;
                };
                createdAt: string;
                fundsCapturedAmount: {
                    currency: string;
                    value: number;
                };
                payoutAmount: {
                    currency: string;
                    value: number;
                };
                unpaidAmount: {
                    currency: string;
                    value: number;
                };
            }[];
        }>) | undefined;
        getTransaction?: ((options: {
            body?: any;
            origin?: string | undefined;
            signal?: AbortSignal | undefined;
            accept?: string | undefined;
            headers?: HeadersInit | undefined;
            errorMessage?: string | undefined;
            contentType?: string | undefined;
            clientKey?: string | undefined;
            errorLevel?: import("../Http/types").ErrorLevel | undefined;
            errorHandler?: ((response: any) => any) | undefined;
        }, args_0: {
            path: {
                transactionId: string;
            };
        }) => Promise<{
            amount: {
                currency: string;
                value: number;
            };
            balanceAccountId: string;
            bankAccount?: {
                accountNumberLastFourDigits: string;
            } | undefined;
            category: "Other" | "Fee" | "ATM" | "Capital" | "Chargeback" | "Correction" | "Payment" | "Refund" | "Transfer";
            createdAt: string;
            deductedAmount?: {
                currency: string;
                value: number;
            } | undefined;
            id: string;
            originalAmount?: {
                currency: string;
                value: number;
            } | undefined;
            paymentMethod?: {
                lastFourDigits?: string | undefined;
                type: string;
            } | undefined;
            paymentPspReference?: string | undefined;
            refundDetails?: {
                refundLocked?: boolean | undefined;
                refundMode: "non_refundable" | "partially_refundable_with_line_items_required" | "partially_refundable_any_amount" | "fully_refundable_only";
                refundStatuses?: {
                    amount: {
                        currency: string;
                        value: number;
                    };
                    status: "in_progress" | "completed" | "failed";
                }[] | undefined;
                refundableAmount?: {
                    currency: string;
                    value: number;
                } | undefined;
            } | undefined;
            refundMetadata?: {
                originalPaymentId: string;
                refundPspReference: string;
                refundReason?: "other" | "requested_by_customer" | "issue_with_item_sold" | "fraudulent" | "duplicate" | undefined;
                refundType: "full" | "partial";
            } | undefined;
            status: "Booked" | "Pending" | "Reversed";
        }>) | undefined;
        getTransactionTotals?: ((options: {
            body?: any;
            origin?: string | undefined;
            signal?: AbortSignal | undefined;
            accept?: string | undefined;
            headers?: HeadersInit | undefined;
            errorMessage?: string | undefined;
            contentType?: string | undefined;
            clientKey?: string | undefined;
            errorLevel?: import("../Http/types").ErrorLevel | undefined;
            errorHandler?: ((response: any) => any) | undefined;
        }, args_0: {
            query: {
                balanceAccountId: string;
                createdSince?: string | undefined;
                createdUntil?: string | undefined;
                categories?: string[] | undefined;
                statuses?: ("Booked" | "Pending" | "Reversed")[] | undefined;
                currencies?: string[] | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
            };
        }) => Promise<{
            data: {
                currency: string;
                expenses: number;
                incomings: number;
            }[];
        }>) | undefined;
        getTransactions?: ((options: {
            body?: any;
            origin?: string | undefined;
            signal?: AbortSignal | undefined;
            accept?: string | undefined;
            headers?: HeadersInit | undefined;
            errorMessage?: string | undefined;
            contentType?: string | undefined;
            clientKey?: string | undefined;
            errorLevel?: import("../Http/types").ErrorLevel | undefined;
            errorHandler?: ((response: any) => any) | undefined;
        }, args_0: {
            query: {
                balanceAccountId: string;
                createdSince?: string | undefined;
                createdUntil?: string | undefined;
                categories?: string[] | undefined;
                statuses?: ("Booked" | "Pending" | "Reversed")[] | undefined;
                currencies?: string[] | undefined;
                minAmount?: number | undefined;
                maxAmount?: number | undefined;
                cursor?: string | undefined;
                sortDirection?: "desc" | "asc" | undefined;
                limit?: number | undefined;
            };
        }) => Promise<{
            _links: {
                next: {
                    cursor: string;
                };
                prev: {
                    cursor: string;
                };
            };
            data: {
                amount: {
                    currency: string;
                    value: number;
                };
                balanceAccountId: string;
                bankAccount?: {
                    accountNumberLastFourDigits: string;
                } | undefined;
                category: "Other" | "Fee" | "ATM" | "Capital" | "Chargeback" | "Correction" | "Payment" | "Refund" | "Transfer";
                createdAt: string;
                deductedAmount?: {
                    currency: string;
                    value: number;
                } | undefined;
                id: string;
                originalAmount?: {
                    currency: string;
                    value: number;
                } | undefined;
                paymentMethod?: {
                    lastFourDigits?: string | undefined;
                    type: string;
                } | undefined;
                paymentPspReference?: string | undefined;
                refundDetails?: {
                    refundLocked?: boolean | undefined;
                    refundMode: "non_refundable" | "partially_refundable_with_line_items_required" | "partially_refundable_any_amount" | "fully_refundable_only";
                    refundStatuses?: {
                        amount: {
                            currency: string;
                            value: number;
                        };
                        status: "in_progress" | "completed" | "failed";
                    }[] | undefined;
                    refundableAmount?: {
                        currency: string;
                        value: number;
                    } | undefined;
                } | undefined;
                refundMetadata?: {
                    originalPaymentId: string;
                    refundPspReference: string;
                    refundReason?: "other" | "requested_by_customer" | "issue_with_item_sold" | "fraudulent" | "duplicate" | undefined;
                    refundType: "full" | "partial";
                } | undefined;
                status: "Booked" | "Pending" | "Reversed";
            }[];
        }>) | undefined;
        initiateRefund?: ((options: {
            body?: any;
            origin?: string | undefined;
            signal?: AbortSignal | undefined;
            accept?: string | undefined;
            headers?: HeadersInit | undefined;
            errorMessage?: string | undefined;
            contentType?: string | undefined;
            clientKey?: string | undefined;
            errorLevel?: import("../Http/types").ErrorLevel | undefined;
            errorHandler?: ((response: any) => any) | undefined;
        } & {
            contentType: "application/json";
            body: {
                amount: {
                    currency: string;
                    value: number;
                };
                refundReason: "other" | "requested_by_customer" | "issue_with_item_sold" | "fraudulent" | "duplicate";
            };
        }, args_0: {
            path: {
                transactionId: string;
            };
        }) => Promise<{
            amount: {
                currency: string;
                value: number;
            };
            refundReason?: string | undefined;
            status?: string | undefined;
        }>) | undefined;
        getReports?: ((options: {
            body?: any;
            origin?: string | undefined;
            signal?: AbortSignal | undefined;
            accept?: string | undefined;
            headers?: HeadersInit | undefined;
            errorMessage?: string | undefined;
            contentType?: string | undefined;
            clientKey?: string | undefined;
            errorLevel?: import("../Http/types").ErrorLevel | undefined;
            errorHandler?: ((response: any) => any) | undefined;
        }, args_0: {
            query: {
                balanceAccountId: string;
                type: string;
                createdSince?: string | undefined;
                createdUntil?: string | undefined;
                limit?: number | undefined;
                cursor?: string | undefined;
            };
        }) => Promise<{
            _links?: {
                next: {
                    cursor: string;
                };
                prev: {
                    cursor: string;
                };
            } | undefined;
            data?: {
                createdAt: string;
                type: "payout";
            }[] | undefined;
        }>) | undefined;
        createGrantOffer?: ((options: {
            body?: any;
            origin?: string | undefined;
            signal?: AbortSignal | undefined;
            accept?: string | undefined;
            headers?: HeadersInit | undefined;
            errorMessage?: string | undefined;
            contentType?: string | undefined;
            clientKey?: string | undefined;
            errorLevel?: import("../Http/types").ErrorLevel | undefined;
            errorHandler?: ((response: any) => any) | undefined;
        } & {
            contentType: "application/json";
            body: {
                amount: number;
                currency: string;
            };
        }) => Promise<{
            expectedRepaymentPeriodDays: number;
            feesAmount: {
                currency: string;
                value: number;
            };
            grantAmount: {
                currency: string;
                value: number;
            };
            id: string;
            maximumRepaymentPeriodDays?: number | undefined;
            repaymentRate: number;
            thresholdAmount: {
                currency: string;
                value: number;
            };
            totalAmount: {
                currency: string;
                value: number;
            };
        }>) | undefined;
        getDynamicGrantOffer?: ((options: {
            body?: any;
            origin?: string | undefined;
            signal?: AbortSignal | undefined;
            accept?: string | undefined;
            headers?: HeadersInit | undefined;
            errorMessage?: string | undefined;
            contentType?: string | undefined;
            clientKey?: string | undefined;
            errorLevel?: import("../Http/types").ErrorLevel | undefined;
            errorHandler?: ((response: any) => any) | undefined;
        }, args_0: {
            query: {
                amount: number;
                currency: string;
            };
        }) => Promise<{
            expectedRepaymentPeriodDays: number;
            feesAmount: {
                currency: string;
                value: number;
            };
            grantAmount: {
                currency: string;
                value: number;
            };
            id: string;
            maximumRepaymentPeriodDays?: number | undefined;
            repaymentRate: number;
            thresholdAmount: {
                currency: string;
                value: number;
            };
            totalAmount: {
                currency: string;
                value: number;
            };
        }>) | undefined;
        getDynamicGrantOffersConfiguration?: ((options: {
            body?: any;
            origin?: string | undefined;
            signal?: AbortSignal | undefined;
            accept?: string | undefined;
            headers?: HeadersInit | undefined;
            errorMessage?: string | undefined;
            contentType?: string | undefined;
            clientKey?: string | undefined;
            errorLevel?: import("../Http/types").ErrorLevel | undefined;
            errorHandler?: ((response: any) => any) | undefined;
        }) => Promise<{
            maxAmount: {
                currency: string;
                value: number;
            };
            minAmount: {
                currency: string;
                value: number;
            };
            step: number;
        }>) | undefined;
        getGrants?: ((options: {
            body?: any;
            origin?: string | undefined;
            signal?: AbortSignal | undefined;
            accept?: string | undefined;
            headers?: HeadersInit | undefined;
            errorMessage?: string | undefined;
            contentType?: string | undefined;
            clientKey?: string | undefined;
            errorLevel?: import("../Http/types").ErrorLevel | undefined;
            errorHandler?: ((response: any) => any) | undefined;
        }) => Promise<{
            data: {
                balanceAccountCode: string;
                balanceAccountDescription: string;
                expectedRepaymentPeriodDays: number;
                feesAmount: {
                    currency: string;
                    value: number;
                };
                grantAmount: {
                    currency: string;
                    value: number;
                };
                id: string;
                maximumRepaymentPeriodDays?: number | undefined;
                missingActions?: {
                    type: "signToS";
                }[] | undefined;
                offerExpiresAt?: string | undefined;
                remainingFeesAmount: {
                    currency: string;
                    value: number;
                };
                remainingGrantAmount: {
                    currency: string;
                    value: number;
                };
                remainingTotalAmount: {
                    currency: string;
                    value: number;
                };
                repaidFeesAmount: {
                    currency: string;
                    value: number;
                };
                repaidGrantAmount: {
                    currency: string;
                    value: number;
                };
                repaidTotalAmount: {
                    currency: string;
                    value: number;
                };
                repaymentPeriodLeft: number;
                repaymentRate: number;
                status: "Failed" | "Pending" | "Repaid" | "Revoked" | "Active" | "WrittenOff";
                termEndsAt: string;
                thresholdAmount: {
                    currency: string;
                    value: number;
                };
                totalAmount: {
                    currency: string;
                    value: number;
                };
            }[];
        }>) | undefined;
        requestFunds?: ((options: {
            body?: any;
            origin?: string | undefined;
            signal?: AbortSignal | undefined;
            accept?: string | undefined;
            headers?: HeadersInit | undefined;
            errorMessage?: string | undefined;
            contentType?: string | undefined;
            clientKey?: string | undefined;
            errorLevel?: import("../Http/types").ErrorLevel | undefined;
            errorHandler?: ((response: any) => any) | undefined;
        }, args_0: {
            path: {
                grantOfferId: string;
            };
        }) => Promise<{
            balanceAccountCode: string;
            balanceAccountDescription: string;
            expectedRepaymentPeriodDays: number;
            feesAmount: {
                currency: string;
                value: number;
            };
            grantAmount: {
                currency: string;
                value: number;
            };
            id: string;
            maximumRepaymentPeriodDays?: number | undefined;
            missingActions?: {
                type: "signToS";
            }[] | undefined;
            offerExpiresAt?: string | undefined;
            remainingFeesAmount: {
                currency: string;
                value: number;
            };
            remainingGrantAmount: {
                currency: string;
                value: number;
            };
            remainingTotalAmount: {
                currency: string;
                value: number;
            };
            repaidFeesAmount: {
                currency: string;
                value: number;
            };
            repaidGrantAmount: {
                currency: string;
                value: number;
            };
            repaidTotalAmount: {
                currency: string;
                value: number;
            };
            repaymentPeriodLeft: number;
            repaymentRate: number;
            status: "Failed" | "Pending" | "Repaid" | "Revoked" | "Active" | "WrittenOff";
            termEndsAt: string;
            thresholdAmount: {
                currency: string;
                value: number;
            };
            totalAmount: {
                currency: string;
                value: number;
            };
        }>) | undefined;
        signToSActionDetails?: ((options: {
            body?: any;
            origin?: string | undefined;
            signal?: AbortSignal | undefined;
            accept?: string | undefined;
            headers?: HeadersInit | undefined;
            errorMessage?: string | undefined;
            contentType?: string | undefined;
            clientKey?: string | undefined;
            errorLevel?: import("../Http/types").ErrorLevel | undefined;
            errorHandler?: ((response: any) => any) | undefined;
        }, args_0: {
            query: {
                redirectUrl: string;
                locale: string;
            };
        }) => Promise<{
            url: string;
        }>) | undefined;
        downloadReport?: ((options: {
            body?: any;
            origin?: string | undefined;
            signal?: AbortSignal | undefined;
            accept?: string | undefined;
            headers?: HeadersInit | undefined;
            errorMessage?: string | undefined;
            contentType?: string | undefined;
            clientKey?: string | undefined;
            errorLevel?: import("../Http/types").ErrorLevel | undefined;
            errorHandler?: ((response: any) => any) | undefined;
        }, args_0: {
            query: {
                balanceAccountId: string;
                type: string;
                createdAt?: string | undefined;
            };
        }) => Promise<Uint8Array>) | undefined;
    };
    hasError: boolean;
    isExpired: boolean | undefined;
    isFrozen: boolean;
    refreshing: boolean;
}> & Pick<AuthSession, "refresh" | "http">;
export default useAuthContext;
//# sourceMappingURL=context.d.ts.map