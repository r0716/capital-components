import { SessionSpecification } from '../../../primitives/context/session';
import { http as _http } from '../../Http/http';
import type { SessionObject, SessionRequest } from '../types';
import type { onErrorHandler } from '../../types';
type _AuthSessionSpecification = SessionSpecification<SessionObject, Parameters<typeof _http>>;
export declare class AuthSessionSpecification implements _AuthSessionSpecification {
    onSessionCreate?: SessionRequest | undefined;
    errorHandler: onErrorHandler | null;
    readonly autoRefresh: _AuthSessionSpecification['autoRefresh'];
    readonly onRefresh: _AuthSessionSpecification['onRefresh'];
    constructor(onSessionCreate?: SessionRequest | undefined);
    readonly assert: _AuthSessionSpecification['assert'];
    readonly deadline: _AuthSessionSpecification['deadline'];
    http: _AuthSessionSpecification['http'];
    private _errorHandler;
}
export default AuthSessionSpecification;
//# sourceMappingURL=AuthSessionSpecification.d.ts.map