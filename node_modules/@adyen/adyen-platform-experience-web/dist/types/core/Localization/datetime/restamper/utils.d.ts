import type { RestampContext, Restamper, RestampResult } from './types';
export declare const computeTimezoneOffsetInMinutes: ([offsetHours, offsetMinutes]: readonly [
    number,
    number
]) => number;
export declare const computeTimezoneOffsetsFromMinutes: (timezoneOffsetInMinutes: number) => readonly [number, number];
export declare const parseTimezoneOffset: (offset: string | number) => number;
/**
 * @param timezoneOffset {number} The minute offsets relative to GMT (Greenwich Mean Time).
 * @returns {string} The GMT suffixed string for the specified offsets in the format GMT(+|-)[HH]:[MM], or just GMT (if [HH]:[MM] is 00:00).
 */
export declare const getGMTSuffixForTimezoneOffset: (timezoneOffset: RestampResult['offset']) => string;
/**
 * @param timezoneOffset {number} The minute offsets of the timezone relative to GMT (Greenwich Mean Time).
 * @param timezoneOffsetRelativeToSystem {number} The minute offsets of the timezone relative to the system timezone.
 * @returns {string} The system timezone GMT suffixed string in the format GMT(+|-)[HH]:[MM], or just GMT (if [HH]:[MM] is 00:00).
 */
export declare const getSystemTimezoneGMTSuffixFromTimezoneOffsets: (timezoneOffset: RestampResult['offset'], timezoneOffsetRelativeToSystem: RestampResult['offset']) => string;
export declare const getTimezoneOffsetFromFormattedDateString: (date?: string) => number;
export declare const getTimezoneOffsetForTimestamp: (timestamp: number, timezoneFormatter?: RestampContext['formatter']) => number;
export declare const systemToTimezone: <R extends Restamper = Restamper>(restamper: R, time: Parameters<R>[0]) => number;
export declare const timezoneToSystem: <R extends Restamper = Restamper>(restamper: R, time: Parameters<R>[0]) => number;
//# sourceMappingURL=utils.d.ts.map