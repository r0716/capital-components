import { EXCLUDE_PROPS } from './constants/localization';
import type { CustomTranslations, Locale, TranslationKey, TranslationOptions, TranslationSource, TranslationSourceRecord } from '../../translations';
import { RestamperWithTimezone } from './datetime/restamper';
export default class Localization {
    #private;
    private watch;
    i18n: Omit<Localization, (typeof EXCLUDE_PROPS)[number]>;
    preferredTranslations?: Readonly<{
        [k: Locale]: TranslationSource;
    }>;
    constructor(locale?: string, availableTranslations?: TranslationSourceRecord[]);
    get customTranslations(): CustomTranslations;
    set customTranslations(customTranslations: CustomTranslations | undefined | null);
    get languageCode(): string;
    get lastRefreshTimestamp(): number;
    get locale(): Locale;
    set locale(locale: string | undefined | null);
    get ready(): Promise<void>;
    get supportedLocales(): Readonly<Locale[]>;
    get timezone(): RestamperWithTimezone['tz']['current'];
    set timezone(timezone: string | undefined | null);
    /**
     * Returns a translated string from a key in the current {@link Localization.locale}
     * @param key - Translation key
     * @param options - Translation options
     * @returns Translated string
     */
    get(key: TranslationKey, options?: TranslationOptions): string;
    /**
     * Returns a boolean that checks if the translation key exists in the current {@link Localization.locale}
     * @param key - Translation key
     * @param options - Translation options
     * @returns boolean
     */
    has(key: string, options?: TranslationOptions): key is TranslationKey;
    /**
     * Returns a localized string for an amount
     * @param amount - Amount to be converted
     * @param currencyCode - Currency code of the amount
     * @param options - Options for String.prototype.toLocaleString
     */
    amount(amount: number, currencyCode: string, options?: Record<string, any>): string;
    /**
     * Returns a localized string for a date
     * @param date - Date to be localized
     * @param options - Options for {@link Date.toLocaleDateString}
     */
    date(date: number | string | Date, options?: Intl.DateTimeFormatOptions): string;
    /**
     * Returns a localized string for a full date
     * @param date - Date to be localized
     */
    fullDate(date: number | string | Date): string;
}
//# sourceMappingURL=Localization.d.ts.map