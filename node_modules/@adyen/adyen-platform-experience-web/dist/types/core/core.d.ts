import type { CoreOptions, onErrorHandler } from './types';
import { AuthSession } from './Auth/session/AuthSession';
import BaseElement from '../components/external/BaseElement';
import Localization, { TranslationSourceRecord } from './Localization';
declare class Core<AvailableTranslations extends TranslationSourceRecord[] = [], CustomTranslations extends {} = {}> {
    static readonly version: string;
    components: BaseElement<any>[];
    options: CoreOptions<AvailableTranslations, CustomTranslations>;
    localization: Localization;
    loadingContext: string;
    session: AuthSession;
    onError?: onErrorHandler;
    constructor(options: CoreOptions<AvailableTranslations, CustomTranslations>);
    initialize(): Promise<this>;
    /**
     * Updates global configurations, resets the internal state and remounts each element.
     * @param options - props to update
     * @returns this - the element instance
     */
    update: (options?: Partial<CoreOptions<AvailableTranslations, CustomTranslations>>) => Promise<this>;
    /**
     * Remove the reference of a component
     * @param component - reference to the component to be removed
     * @returns this - the element instance
     */
    remove: (component: BaseElement<any>) => this;
    /**
     * @internal
     * Register components in core to be able to update them all at once
     */
    registerComponent: (component: BaseElement<any>) => void;
    /**
     * @internal
     * Enhances the config object passed when AdyenPlatformExperience is initialised (environment, clientKey, etc...)
     * (Re)Initializes core properties & processes (i18n, etc...)
     * @param options - the config object passed when AdyenPlatformExperience is initialised
     * @returns this
     */
    private setOptions;
    /**
     * @internal
     * @param options - options that will be merged to the global Checkout props
     * @returns props for a new UIElement
     */
    private getPropsForComponent;
}
export default Core;
//# sourceMappingURL=core.d.ts.map