import { AdyenErrorResponse, ErrorLevel, HttpOptions } from './types';
export declare const enum ErrorTypes {
    /** Network error. */
    NETWORK_ERROR = "NETWORK_ERROR",
    /** Shopper canceled the current transaction. */
    CANCEL = "CANCEL",
    /** Implementation error. The method or parameter are incorrect or are not supported. */
    IMPLEMENTATION_ERROR = "IMPLEMENTATION_ERROR",
    /** Generic error. */
    ERROR = "ERROR",
    /** Token expired */
    EXPIRED_TOKEN = "EXPIRED_TOKEN"
}
export declare const getErrorType: (errorCode: number) => ErrorTypes;
export declare const getResponseContentType: (response: Response) => string | undefined;
export declare const getResponseDownloadFilename: (response: Response) => string | undefined;
export declare const getRequestObject: (options: HttpOptions) => RequestInit;
export declare function handleFetchError({ message, level, errorCode, type, requestId, }: {
    message: string;
    level: ErrorLevel | undefined;
    errorCode?: string;
    type?: ErrorTypes;
    requestId?: string;
    status?: number;
}): void;
export declare function isAdyenErrorResponse(data: any): data is AdyenErrorResponse;
export declare function parseSearchParams<T extends Record<string, any>>(parameters: T): URLSearchParams;
//# sourceMappingURL=utils.d.ts.map