import type { KeyOfRecord, WithReplacedUnderscoreOrDash } from '../utils/types';
declare const _en_US: {
    account: string;
    accountBalance: string;
    accountDescription: string;
    accountID: string;
    additions: string;
    adjustments: string;
    amount: string;
    and: string;
    apply: string;
    back: string;
    balanceAccount: string;
    balanceAccountId: string;
    Booked: string;
    "button.clearAll": string;
    "calendar.controls": string;
    "calendar.nextMonth": string;
    "calendar.previousMonth": string;
    "calendar.timezone": string;
    "capital.accountIsInactive": string;
    "capital.actionNeeded": string;
    "capital.businessFinancing": string;
    "capital.businessFinancingOffer": string;
    "capital.businessFinancingSummary": string;
    "capital.closed": string;
    "capital.couldNotContinueWithTheOffer": string;
    "capital.couldNotLoadFinancialOffers": string;
    "capital.dailyRepaymentRate": string;
    "capital.daysAndDaysLeft": string;
    "capital.expectedRepaymentPeriod": string;
    "capital.failed": string;
    "capital.fees": string;
    "capital.fullyRepaid": string;
    "capital.goToTermsAndConditions": string;
    "capital.grantID": string;
    "capital.howMuchMoneyDoYouNeed": string;
    "capital.inProgress": string;
    "capital.maximumRepaymentPeriod": string;
    "capital.minimumRepaymentToRepayTheFinancingOnTime": string;
    "capital.needSomeExtraMoney": string;
    "capital.oneMonth": string;
    "capital.pending": string;
    "capital.poweredByAdyen": string;
    "capital.primaryAccount": string;
    "capital.remaining": string;
    "capital.remainingAmount": string;
    "capital.remainingFees": string;
    "capital.repaid": string;
    "capital.repaidAmount": string;
    "capital.repaidFees": string;
    "capital.repaymentThreshold": string;
    "capital.requestedFunds": string;
    "capital.requestFunds": string;
    "capital.requesting": string;
    "capital.reviewOffer": string;
    "capital.revoked": string;
    "capital.seeNewOffer": string;
    "capital.seeOptions": string;
    "capital.signTermsAndConditionsToReceiveFunds": string;
    "capital.signTheTermsToReceiveYourFunds": string;
    "capital.termEnds": string;
    "capital.thereIsNoPrimaryAccountConfigured": string;
    "capital.thisOfferExpiresOn": string;
    "capital.totalFees": string;
    "capital.totalRepaymentAmount": string;
    "capital.weCouldNotContinueWithTheOffer": string;
    "capital.weCouldNotContinueWithTheOfferContactSupportForHelp": string;
    "capital.weCouldNotLoadFinancialOffers": string;
    "capital.weCouldNotProcessThisRequestTryAgain": string;
    "capital.weReceivedYourRequestAndWeAreWorkingOnItNowCheckBackSoon": string;
    "capital.writtenOff": string;
    "capital.xDays": string;
    "capital.xMonths": string;
    "capital.xPercent": string;
    "capital.youAcceptedButThenReturnedTheseFunds": string;
    "capital.youAcceptedTheseFundsButDidNotRepayThem": string;
    "capital.youAreRequestingFundingOf": string;
    "capital.youHaveBeenPrequalifiedForBusinessFinancingUpToX.part1": string;
    "capital.youHaveBeenPrequalifiedForBusinessFinancingUpToX.part2": string;
    "capital.yourRequestedFundsWere": string;
    "capital.youShouldGetTheFundsWithinOneBusinessDay": string;
    "capital.youWillNeedToRepayAMinimumOfXEveryXDaysToPayOffTheFunds": string;
    "capital.youWillSoonQualifyForAFinancialOffer": string;
    capture: string;
    category: string;
    chargeback: string;
    closeIconLabel: string;
    contactSupport: string;
    contactSupportForHelp: string;
    contactSupportForHelpAndShareErrorCode: string;
    copied: string;
    copy: string;
    correction: string;
    currency: string;
    date: string;
    dateRange: string;
    default: string;
    description: string;
    dismiss: string;
    download: string;
    downloading: string;
    email: string;
    entityWasNotFound: string;
    entityWasNotFoundDetail: string;
    "error.pleaseTryAgainLater": string;
    "error.somethingWentWrongWithDownload": string;
    "expandableCard.collapse": string;
    "expandableCard.expand": string;
    export: string;
    fee: string;
    file: string;
    "filter.date.since": string;
    "filter.date.until": string;
    filterBar: string;
    "filterPlaceholder.category": string;
    "filterPlaceholder.currency": string;
    "filterPlaceholder.status": string;
    from: string;
    full: string;
    fundsCaptured: string;
    goBack: string;
    grantIssued: string;
    grantRepayment: string;
    hideContent: string;
    id: string;
    incompleteField: string;
    inProgress: string;
    loading: string;
    max: string;
    min: string;
    mobile: string;
    netPayout: string;
    nextPayouts: string;
    noData: string;
    noNegativeNumbersAllowed: string;
    noPayoutsFound: string;
    noReportsFound: string;
    noTransactionsFound: string;
    other: string;
    paginatedNavigation: string;
    "pagination.nextPage": string;
    "pagination.previousPage": string;
    "pagination.showing": string;
    partial: string;
    paymentId: string;
    paymentMethod: string;
    payoutDetails: string;
    payoutsNotice: string;
    payoutsTitle: string;
    Pending: string;
    pleaseComeBackLater: string;
    pleaseReachOutToSupportForAssistance: string;
    "rangePreset.custom": string;
    "rangePreset.last30Days": string;
    "rangePreset.last7Days": string;
    "rangePreset.lastMonth": string;
    "rangePreset.lastWeek": string;
    "rangePreset.thisMonth": string;
    "rangePreset.thisWeek": string;
    "rangePreset.yearToDate": string;
    reachOutToSupport: string;
    referenceID: string;
    refresh: string;
    refund: string;
    "refund.amountAlreadyRefunded": string;
    "refund.amountFailed": string;
    "refund.amountInProgress": string;
    "refund.fee": string;
    "refund.fullAmountFailed": string;
    "refund.fullAmountRefunded": string;
    "refund.goToPayment": string;
    "refund.maximumRefundable": string;
    "refund.onlyRefundable": string;
    "refund.originalAmount": string;
    "refund.originalPayment": string;
    "refund.paymentPspReference": string;
    "refund.pspReference": string;
    "refund.refundFee": string;
    "refund.refundPspReference": string;
    "refund.returnToRefund": string;
    "refund.theRefundIsBeingProcessed": string;
    refundAction: string;
    refundActionErrorSubtitle: string;
    refundActionErrorTitle: string;
    refundActionSuccessSubtitle: string;
    refundActionSuccessTitle: string;
    refundAmount: string;
    "refundAmount.excess": string;
    "refundAmount.required": string;
    "refunded.full": string;
    "refunded.partial": string;
    refundNotice: string;
    refundPayment: string;
    refundReason: string;
    "refundReason.duplicate": string;
    "refundReason.fraudulent": string;
    "refundReason.issue_with_item_sold": string;
    "refundReason.other": string;
    "refundReason.requested_by_customer": string;
    refundReference: string;
    "refundReference.placeholder": string;
    remainingAmount: string;
    report: string;
    "reportsError.tooManyDownloads": string;
    reportsNotice: string;
    reportsTitle: string;
    "reportType.payout": string;
    reset: string;
    Reversed: string;
    "select.filter.placeholder": string;
    "select.noOptionsFound": string;
    somethingWentWrong: string;
    somethingWentWrongTryRefreshingOrComeBackLater: string;
    status: string;
    structuredList: string;
    subtractions: string;
    tabs: string;
    theErrorCodeIs: string;
    thereAreNoResults: string;
    theRequestIsMissingRequiredFieldsOrContainsInvalidData: string;
    thereWasAnUnexpectedError: string;
    theSelectedBalanceAccountIsIncorrect: string;
    timezone: string;
    to: string;
    "tooltip.ATM": string;
    "tooltip.Capital": string;
    "tooltip.Chargeback": string;
    "tooltip.Correction": string;
    "tooltip.Fee": string;
    "tooltip.Other": string;
    "tooltip.Payment": string;
    "tooltip.Refund": string;
    "tooltip.totalIncoming": string;
    "tooltip.totalOutgoing": string;
    "tooltip.Transfer": string;
    totalIncoming: string;
    totalOutgoing: string;
    toValueShouldBeGreaterThanTheFromValue: string;
    transactionDetails: string;
    transactions: string;
    transactionsOverviewTitle: string;
    transactionType: string;
    transfer: string;
    tryDifferentSearchOrResetYourFiltersAndWeWillTryAgain: string;
    tryRefreshingThePageOrComeBackLater: string;
    txAmount: string;
    "txType.ATM": string;
    "txType.Capital": string;
    "txType.Chargeback": string;
    "txType.Correction": string;
    "txType.Fee": string;
    "txType.Other": string;
    "txType.Payment": string;
    "txType.Refund": string;
    "txType.Transfer": string;
    type: string;
    value: string;
    weCouldNotLoadThePayoutsOverview: string;
    weCouldNotLoadTheReportsOverview: string;
    weCouldNotLoadTheTransactionsOverview: string;
    weCouldNotLoadYourBalanceAccounts: string;
    weCouldNotLoadYourPayouts: string;
    weCouldNotLoadYourReports: string;
    weCouldNotLoadYourTransactions: string;
};
type _SupportedLocale = KeyOfRecord<typeof all_locales>;
type _Translations = Translations | PromiseLike<Translations>;
export type CustomTranslations = Record<string, Translations>;
export type Locale = `${Lowercase<string>}-${Uppercase<string>}`;
export type SupportedLocale = WithReplacedUnderscoreOrDash<_SupportedLocale, '_', '-'>;
export type TranslationKey = KeyOfRecord<typeof _en_US>;
export type Translations = {
    [key in TranslationKey]?: string;
};
export type TranslationSource = _Translations | (() => _Translations);
export type TranslationSourceRecord = {
    [K in _SupportedLocale]: {
        [P in K]: TranslationSource;
    };
}[_SupportedLocale];
export type TranslationOptions = {
    values?: Record<string, string | number>;
    count?: number;
};
export declare const da_DK: {
    da_DK: () => Promise<Translations>;
};
export declare const de_DE: {
    de_DE: () => Promise<Translations>;
};
export declare const es_ES: {
    es_ES: () => Promise<Translations>;
};
export declare const fi_FI: {
    fi_FI: () => Promise<Translations>;
};
export declare const fr_FR: {
    fr_FR: () => Promise<Translations>;
};
export declare const it_IT: {
    it_IT: () => Promise<Translations>;
};
export declare const nl_NL: {
    nl_NL: () => Promise<Translations>;
};
export declare const no_NO: {
    no_NO: () => Promise<Translations>;
};
export declare const pt_BR: {
    pt_BR: () => Promise<Translations>;
};
export declare const sv_SE: {
    sv_SE: () => Promise<Translations>;
};
export declare const en_US: {
    en_US: Translations;
};
export declare const all_locales: {
    readonly sv_SE: () => Promise<Translations>;
    readonly pt_BR: () => Promise<Translations>;
    readonly no_NO: () => Promise<Translations>;
    readonly nl_NL: () => Promise<Translations>;
    readonly it_IT: () => Promise<Translations>;
    readonly fr_FR: () => Promise<Translations>;
    readonly fi_FI: () => Promise<Translations>;
    readonly es_ES: () => Promise<Translations>;
    readonly en_US: Translations;
    readonly de_DE: () => Promise<Translations>;
    readonly da_DK: () => Promise<Translations>;
};
export {};
//# sourceMappingURL=index.d.ts.map