import { SYSTEM_TIMEZONE_FORMATTER as n, REGEX_TZ_OFFSET as m } from "./constants.js";
import { EMPTY_ARRAY as r } from "../../../../utils/value/constants.js";
import { mod as i } from "../../../../utils/value/number.js";
const E = /\+(?=-)|([+-]00:00)/g, p = new RegExp("(?<=^\\D?)(\\d)$"), O = ([t, s]) => (Math.abs(t * 60) + s) * (t < 0 ? -1 : 1), S = (t) => Object.freeze([
  Math.floor(t / 60),
  // offset hours
  i(t, 60)
  // offset minutes
]), _ = (t) => parseInt(t, 10) || 0, F = (t) => `GMT+${S(t).map((o) => `${o}`.replace(p, "0$1")).join(":")}`.replace(E, ""), c = (t) => {
  var e;
  const s = ((e = t == null ? void 0 : t.match(m)) == null ? void 0 : e[0].split(":", 2).map(_)) ?? r;
  return O(s.concat(0, 0).slice(0, 2));
}, R = (t, s = n) => {
  var f;
  const e = c((f = n) == null ? void 0 : f.format(t));
  return c(s == null ? void 0 : s.format(t)) - e;
}, T = (t, s, e = 1) => {
  const { offset: o, timestamp: f } = t(s);
  return f - o * e * 6e4;
}, g = (t, s) => T(t, s, 1), u = (t, s) => T(t, s, -1);
export {
  O as computeTimezoneOffsetInMinutes,
  S as computeTimezoneOffsetsFromMinutes,
  F as getGMTSuffixForTimezoneOffset,
  R as getTimezoneOffsetForTimestamp,
  c as getTimezoneOffsetFromFormattedDateString,
  _ as parseTimezoneOffset,
  g as systemToTimezone,
  u as timezoneToSystem
};
