import { SYSTEM_TIMEZONE as i, BASE_LOCALE as c, BASE_FORMAT_OPTIONS as E, SYSTEM_TIMEZONE_FORMATTER as f } from "./constants.js";
import { getTimezoneOffsetForTimestamp as a } from "./utils.js";
import { struct as O } from "../../../../utils/struct/main.js";
import { isUndefined as T, isNullish as u } from "../../../../utils/value/is.js";
const l = (() => {
  let n, o;
  T(i) || (n = function() {
    return this.TIMEZONE;
  }, o = function(t) {
    if (u(t))
      this.TIMEZONE = i, this.formatter = f;
    else
      try {
        const e = new Intl.DateTimeFormat(c, { ...E, timeZone: t }), r = e.resolvedOptions().timeZone;
        if (this.TIMEZONE === r)
          return;
        this.TIMEZONE = r, this.formatter = e;
      } catch {
      }
  });
  function m(...t) {
    if (t.length === 0)
      return m.call(this, Date.now());
    const e = t[0], r = new Date(e).getTime(), s = this.formatter ?? f;
    return Object.freeze({
      formatted: s == null ? void 0 : s.format(r),
      offset: a(r, s),
      timestamp: r
    });
  }
  return () => {
    const t = { TIMEZONE: i }, e = o == null ? void 0 : o.bind(t), r = O({
      current: { get: n == null ? void 0 : n.bind(t), set: e },
      system: { value: i }
    });
    return Object.defineProperties(m.bind(t), {
      tz: { get: () => r, set: e }
    });
  };
})(), I = l;
export {
  I as default
};
