import { FALLBACK_LOCALE as d, DEFAULT_TRANSLATIONS as A } from "./constants/localization.js";
import { hasOwnProperty as f } from "../../utils/struct/property.js";
import { EMPTY_OBJECT as c } from "../../utils/value/constants.js";
import { isFunction as C } from "../../utils/value/is.js";
import { asPlainObject as O } from "../../utils/struct/main.js";
const m = { values: c, count: 0 }, p = /^[a-z]{2}-[A-Z]{2}$/, l = (e) => e.substring(0, 2).toLowerCase();
function g(e, r) {
  if (!e)
    return null;
  const t = l(e);
  return r.find((o) => l(o) === t) || null;
}
function i(e) {
  const r = e.replace("_", "-");
  if (p.test(r))
    return r;
  const [t, o] = r.split("-");
  if (!t || !o)
    return null;
  const n = `${t.toLowerCase()}-${o.toUpperCase()}`;
  return n.length === 5 ? n : null;
}
function _(e, r) {
  const t = e.trim();
  if (!t || t.length < 1 || t.length > 5)
    return d;
  const o = i(t);
  return o && r.includes(o) ? o : g(o ?? t, r);
}
function F(e = c, r) {
  return e === c ? e : Object.keys(e).reduce((t, o) => {
    const n = i(o) || _(o, r);
    return n && e[o] && (t[n] = e[o]), t;
  }, {});
}
const L = (e, r) => e.replace(/%{(\w+)}/g, (t, o) => (r == null ? void 0 : r[o]) || ""), N = (e, r, t = m) => {
  const o = t.count ?? 0, n = `${r}__${o}`;
  if (f(e, n) && e[n])
    return L(e[n], t.values);
  const u = `${r}__plural`;
  return f(e, u) && o > 1 && e[u] ? L(e[u], t.values) : f(e, r) && e[r] ? L(e[r], t.values) : null;
}, S = async (e, r = c, t = c) => {
  const o = _(e, Object.keys(r)) || d, n = r[o];
  return {
    ...A,
    // Default en-US translations (in case any other translation file is missing any key)
    ...await (C(n) ? n() : n) ?? c,
    // Merge with our locale file of the locale they are loading
    ...O(t == null ? void 0 : t[e])
    // Merge with their custom locales if available
  };
};
export {
  F as formatCustomTranslations,
  i as formatLocale,
  N as getTranslation,
  S as loadTranslations,
  g as matchLocale,
  _ as parseLocale,
  l as toTwoLetterCode
};
