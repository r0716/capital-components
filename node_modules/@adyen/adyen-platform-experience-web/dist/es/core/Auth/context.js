import { jsx as s } from "../../external/preact/jsx-runtime/dist/jsxRuntime.module.js";
import { createContext as C, toChildArray as b } from "../../external/preact/dist/preact.module.js";
import { useContext as x, useMemo as A, useState as e, useEffect as n } from "../../external/preact/hooks/dist/hooks.module.js";
import { ErrorMessageDisplay as E } from "../../components/internal/ErrorMessageDisplay/ErrorMessageDisplay.js";
import g from "./session/utils/sessionAwareComponentAvailability/sessionAwareComponentAvailability.js";
import v from "./session/utils/sessionAwareComponentAvailability/helpers/componentAvailabilityErrors.js";
import { asyncNoop as P, noop as U } from "../../utils/common.js";
import { isWatchlistUnsubscribeToken as y } from "../../primitives/reactive/watchlist/main.js";
import { isUndefined as T } from "../../utils/value/is.js";
import { EMPTY_OBJECT as H } from "../../utils/value/constants.js";
const i = C({
  endpoints: H,
  hasError: !1,
  http: P,
  isExpired: void 0,
  isFrozen: !1,
  refresh: U,
  refreshing: !1
}), I = ({ children: a, session: t, type: r }) => {
  const { http: m, refresh: u } = A(() => t, [t]), [, p] = e(0), [c, f] = e(0), [o, h] = e();
  return n(() => {
    g(r, t).then(h);
  }, [t, r]), n(() => t.subscribe((l) => {
    (y(l) ? f : p)((d) => d + 1);
  }), [c]), /* @__PURE__ */ s(i.Provider, { value: { ...t.context, http: m, refresh: u }, children: !T(o) && (o ? b(a) : /* @__PURE__ */ s(
    E,
    {
      withImage: !0,
      centered: !0,
      title: "somethingWentWrong",
      message: [v(r), "contactSupportForHelp"]
    }
  )) });
}, J = () => x(i);
export {
  I as AuthProvider,
  J as default,
  J as useAuthContext
};
