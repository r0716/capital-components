var r = Object.defineProperty;
var a = (s, t, o) => t in s ? r(s, t, { enumerable: !0, configurable: !0, writable: !0, value: o }) : s[t] = o;
var i = (s, t, o) => (a(s, typeof t != "symbol" ? t + "" : t, o), o);
import { FALLBACK_ENV as h, resolveEnvironment as l } from "./utils.js";
import { AuthSession as p } from "./Auth/session/AuthSession.js";
import c from "./Localization/Localization.js";
import { EMPTY_OBJECT as m } from "../utils/value/constants.js";
class e {
  // [TODO]: Change the error handling strategy.
  constructor(t) {
    i(this, "components", []);
    i(this, "options");
    i(this, "localization");
    i(this, "loadingContext");
    i(this, "session", new p());
    i(this, "onError");
    /**
     * Updates global configurations, resets the internal state and remounts each element.
     * @param options - props to update
     * @returns this - the element instance
     */
    i(this, "update", async (t = m) => (this.setOptions(t), await this.initialize(), this.components.forEach((o) => {
      o.props.core === this && o.update(this.getPropsForComponent(this.options));
    }), this));
    /**
     * Remove the reference of a component
     * @param component - reference to the component to be removed
     * @returns this - the element instance
     */
    i(this, "remove", (t) => (this.components = this.components.filter((o) => o._id !== t._id), t.unmount(), this));
    /**
     * @internal
     * Register components in core to be able to update them all at once
     */
    i(this, "registerComponent", (t) => {
      t.props.core === this && this.components.push(t);
    });
    /**
     * @internal
     * Enhances the config object passed when AdyenPlatformExperience is initialised (environment, clientKey, etc...)
     * (Re)Initializes core properties & processes (i18n, etc...)
     * @param options - the config object passed when AdyenPlatformExperience is initialised
     * @returns this
     */
    i(this, "setOptions", (t) => {
      var o, n;
      return this.options = { ...this.options, ...t }, this.localization.locale = (o = this.options) == null ? void 0 : o.locale, this.localization.customTranslations = (n = this.options) == null ? void 0 : n.translations, this.session.loadingContext = this.loadingContext, this.session.onSessionCreate = this.options.onSessionCreate, this;
    });
    this.options = { environment: h, ...t }, this.localization = new c(t.locale, t.availableTranslations), this.loadingContext = l(this.options.environment), this.setOptions(t);
  }
  async initialize() {
    return Promise.all([this.localization.ready]).then(() => this);
  }
  /**
   * @internal
   * @param options - options that will be merged to the global Checkout props
   * @returns props for a new UIElement
   */
  getPropsForComponent(t) {
    return { ...t };
  }
}
i(e, "version", "1.2.0");
const g = e;
export {
  g as default
};
