import { noop as c, identity as f } from "../../common.js";
import { sameValue as m } from "../../value/compare.js";
import { isFunction as u } from "../../value/is.js";
const y = (() => {
  const t = /* @__PURE__ */ new Set(), i = (e, a, r, o) => {
    let n = o == null ? void 0 : o[r];
    return n = u(n) ? n : f, !m(n(e[r]), n(a[r]));
  };
  return Object.defineProperty((e) => (a, r) => {
    try {
      for (const o in a)
        if (t.add(o), i(a, r, o, e))
          return !1;
      for (const o in r)
        if (!t.has(o) && (t.add(o), i(a, r, o, e)))
          return !1;
      return !0;
    } finally {
      t.clear();
    }
  }, "exclude", { value: c });
})();
export {
  y as default,
  y as memoComparator
};
