import { identity as c, fn as o } from "../common.js";
import { EMPTY_ARRAY as s } from "../value/constants.js";
import { isUndefined as f, isFunction as u, isNullish as d } from "../value/is.js";
const p = (t, r, n) => {
  let e = r.get(t);
  return f(e) && u(n) && (f(e = n(t, r)) || r.set(t, e)), e;
}, A = (t, r = s) => {
  const n = `${t || ""}`.trim(), e = n ? n.split(/(?:\s*,\s*)+/).filter(c) : s;
  return e.length ? e : r;
}, F = (t, r, n) => t.includes(r) ? r : d(r) ? t[0] : t.includes(n) ? n : t[0], _ = o(Array.prototype.some), l = function t(r, n, e = /* @__PURE__ */ new Set()) {
  for (const i of n)
    Array.isArray(i) ? t(r, i, e) : (r && e.delete(i), e.add(i));
  return e;
};
o(l, void 0, !1);
o(l, void 0, !0);
export {
  p as getMappedValue,
  A as listFrom,
  F as pickFrom,
  _ as some
};
