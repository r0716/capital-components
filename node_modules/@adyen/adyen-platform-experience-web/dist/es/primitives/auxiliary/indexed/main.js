import { mapIteratorFactory as m, indexedProxyGetTrap as f } from "./helpers.js";
import { truthify as o } from "../../../utils/value/bool.js";
import { struct as a, structFrom as c } from "../../../utils/struct/main.js";
import { isFunction as d, isNumber as h } from "../../../utils/value/is.js";
const l = Object.freeze(
  a({
    [Symbol.iterator]: {
      value() {
        return m.call(this);
      }
    },
    map: {
      value(t, n) {
        return [...m.call(this, t, n)];
      }
    }
  })
), u = (t, n) => d(t) ? u(
  {
    length: { get: t }
  },
  n
) : h(t) ? u(
  {
    length: { value: t }
  },
  n
) : new Proxy(c(l, t), {
  get: f(n),
  set: o
});
export {
  u as createIndexed,
  u as default
};
