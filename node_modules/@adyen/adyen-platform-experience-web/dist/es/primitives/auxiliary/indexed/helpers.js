import { isString as r } from "../../../utils/value/is.js";
import { identity as c } from "../../../utils/common.js";
const s = (e) => (i, t, o) => {
  if (r(t)) {
    const n = +t;
    if (n >= 0 && n < i.length)
      return e(n);
  }
  return Reflect.get(i, t, o);
}, d = function* (e = c, i) {
  for (let t = 0; t < this.length; t++)
    yield e.call(i, this[t], t, this);
};
export {
  s as indexedProxyGetTrap,
  d as mapIteratorFactory
};
