import { createWatchlist as i } from "../../reactive/watchlist/main.js";
import { createInterval as n } from "../interval/main.js";
import { struct as a } from "../../../utils/struct/main.js";
import { enumerable as c } from "../../../utils/struct/property.js";
const l = (() => {
  let e;
  const { cancelSubscriptions: o, requestNotification: r, subscribe: s, on: t } = i({
    // Use wrapper function instead of direct reference to `Date.now`,
    // otherwise, tests will fail since `Date.now` won't be mocked
    now: () => Date.now()
  });
  return t.resume = () => {
    e = n(r, 1e3, !1);
  }, t.idle = () => {
    e == null || e.cancel(), e = void 0;
  }, a({
    cancelSubscriptions: c(o),
    subscribe: c(s)
  });
})(), p = l;
export {
  l as clock,
  p as default
};
