import { useRef as o, useMemo as h, useReducer as M, useEffect as R } from "../../external/preact/hooks/dist/hooks.module.js";
import w from "../useMounted.js";
import { EMPTY_OBJECT as P } from "../../utils/value/constants.js";
const V = (a = P, f = !0) => {
  const n = o(f), e = o(Object.freeze({ ...a })), p = o(new Set(Object.keys(e.current))), u = o(/* @__PURE__ */ new Set()), S = w(), [d, j] = h(() => {
    const r = (c) => {
      S.current && z(c);
    };
    return [
      () => r("reset"),
      (c) => r(c)
    ];
  }, [S]), [$, z] = M((r, c) => {
    if (c === "reset")
      return u.current.clear(), e.current;
    const s = { ...c }, i = [0];
    Object.keys(s).forEach((t, O) => {
      if (!p.current.has(t))
        return;
      const T = r[t] ?? void 0, b = e.current[t] ?? void 0, l = s[t] ?? b;
      if (l === T)
        return;
      const g = Math.floor(O / 32), v = 1 << O % 32;
      s[t] = l, i[g] |= v, u.current[l === b ? "delete" : "add"](t);
    });
    const m = i.some((t) => t) ? n.current && u.current.size === 0 ? e.current : Object.freeze({ ...r, ...s }) : r;
    return n.current || (e.current = m, n.current = !0), m;
  }, e.current), E = h(() => !!u.current.size, []);
  return R(() => {
    e.current = Object.freeze({ ...a }), p.current = new Set(Object.keys(e.current)), n.current = f, d();
  }, [f, a, d]), { canResetState: E, defaultState: e.current, resetState: d, state: $, updateState: j };
}, B = V;
export {
  B as default
};
