import { useState as O, useCallback as r, useMemo as A, useEffect as g } from "../../external/preact/hooks/dist/hooks.module.js";
import { ButtonVariant as P } from "../../components/internal/Button/types.js";
import { CommitAction as t } from "./types.js";
import v from "../../core/Context/useCoreContext.js";
import { boolOrFalse as B } from "../../utils/value/bool.js";
import { EMPTY_OBJECT as L } from "../../utils/value/constants.js";
const b = ({ applyDisabled: a, applyTitle: m, resetDisabled: e, resetTitle: c } = L) => {
  const { i18n: s } = v(), [n, o] = O(t.NONE), [R, u] = O(n !== t.NONE), C = r(() => o(t.APPLY), [o]), E = r(() => o(t.CLEAR), [o]), i = r(() => o(t.NONE), [o]), f = A(
    () => ({
      disabled: B(a),
      event: C,
      title: (m == null ? void 0 : m.trim()) || s.get("apply"),
      variant: P.PRIMARY
    }),
    [s, C, a, m]
  ), N = A(
    () => ({
      disabled: B(e),
      event: E,
      title: (c == null ? void 0 : c.trim()) || s.get("reset"),
      variant: P.SECONDARY
    }),
    [s, E, e, c]
  ), Y = A(() => [f, N], [f, N]);
  return g(() => {
    switch (u(n !== t.NONE), n) {
      case t.APPLY:
      case t.CLEAR:
        i();
        break;
    }
  }, [n, u, i]), { commitAction: n, commitActionButtons: Y, committing: R, resetCommitAction: i };
}, p = b;
export {
  p as default
};
