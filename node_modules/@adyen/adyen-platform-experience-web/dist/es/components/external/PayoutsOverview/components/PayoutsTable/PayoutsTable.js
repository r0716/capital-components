import { jsx as o } from "../../../../../external/preact/jsx-runtime/dist/jsxRuntime.module.js";
import Y from "classnames";
import L from "../../../../../core/Context/useCoreContext.js";
import { getCurrencyCode as M } from "../../../../../core/Localization/amount/amount-util.js";
import { useMemo as c, useCallback as P } from "../../../../../external/preact/hooks/dist/hooks.module.js";
import w from "../../../../../hooks/useTimezoneAwareDateFormatting.js";
import { CellTextPosition as B } from "../../../../internal/DataGrid/types.js";
import x from "../../../../internal/DataOverviewError/DataOverviewError.js";
import { TypographyVariant as s } from "../../../../internal/Typography/types.js";
import u from "../../../../internal/Typography/Typography.js";
import { getLabel as R } from "../../../../utils/getLabel.js";
import { useResponsiveViewport as U, mediaQueries as j } from "../../../../../hooks/useResponsiveViewport.js";
import { BASE_CLASS as N, NET_PAYOUT_CLASS as v } from "./constants.js";
import "./PayoutsTable.scss.js";
import { useTableColumns as I } from "../../../../../hooks/useTableColumns.js";
import g from "../../../../internal/DataGrid/DataGrid.js";
import { DATE_FORMAT_PAYOUTS_MOBILE as G, DATE_FORMAT_PAYOUTS as V } from "../../../../../constants/dateFormats.js";
import $ from "../../../../internal/Pagination/Pagination.js";
import { useAuthContext as W } from "../../../../../core/Auth/context.js";
const h = ["fundsCapturedAmount", "adjustmentAmount", "payoutAmount"], q = ["createdAt", ...h], z = (n) => h.includes(n), Ar = ({
  error: n,
  loading: a,
  onContactSupport: l,
  onRowClick: D,
  showDetails: H,
  showPagination: O,
  data: t,
  ...E
}) => {
  const { i18n: i } = L(), { dateFormat: p } = w("UTC"), { refreshing: A } = W(), S = c(() => a || A, [a, A]), e = U(j.up.sm), m = P(
    (r) => {
      var d, y, C, T;
      const f = i.get(R(r));
      if (z(r))
        return {
          label: (y = (d = t == null ? void 0 : t[0]) == null ? void 0 : d[r]) != null && y.currency ? `${f} (${M((T = (C = t == null ? void 0 : t[0]) == null ? void 0 : C[r]) == null ? void 0 : T.currency)})` : f,
          position: B.RIGHT
        };
    },
    [t, i]
  ), _ = I({
    fields: q,
    columnConfig: c(
      () => ({
        fundsCapturedAmount: { ...m("fundsCapturedAmount"), visible: e },
        adjustmentAmount: { ...m("adjustmentAmount"), visible: e },
        payoutAmount: m("payoutAmount")
      }),
      [m, e]
    )
  }), F = {
    title: "noPayoutsFound",
    message: ["tryDifferentSearchOrResetYourFiltersAndWeWillTryAgain"]
  }, b = c(
    () => () => /* @__PURE__ */ o(x, { error: n, errorMessage: "weCouldNotLoadYourPayouts", onContactSupport: l }),
    [n, l]
  );
  return /* @__PURE__ */ o("div", { className: N, children: /* @__PURE__ */ o(
    g,
    {
      errorDisplay: b,
      error: n,
      columns: _,
      data: t,
      loading: S,
      outline: !1,
      onRowClick: { callback: D },
      emptyTableMessage: F,
      customCells: {
        createdAt: ({ value: r }) => r ? e ? r && /* @__PURE__ */ o(u, { variant: s.BODY, children: p(r, V) }) : p(r, G) : null,
        fundsCapturedAmount: ({ value: r }) => r && /* @__PURE__ */ o(u, { variant: s.BODY, children: i.amount(r.value, r.currency, { hideCurrency: !0 }) }),
        adjustmentAmount: ({ value: r }) => r && /* @__PURE__ */ o(u, { variant: s.BODY, children: i.amount(r.value, r.currency, { hideCurrency: !0 }) }),
        payoutAmount: ({ value: r }) => r && /* @__PURE__ */ o(u, { variant: s.BODY, className: Y({ [`${v}--strong`]: !e }), children: i.amount(r.value, r.currency, { hideCurrency: e }) })
      },
      children: O && /* @__PURE__ */ o(g.Footer, { children: /* @__PURE__ */ o($, { ...E }) })
    }
  ) });
};
export {
  Ar as PayoutsTable
};
