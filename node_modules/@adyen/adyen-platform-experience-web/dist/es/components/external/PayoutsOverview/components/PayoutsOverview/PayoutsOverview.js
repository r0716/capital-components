import { jsx as e } from "../../../../../external/preact/jsx-runtime/dist/jsxRuntime.module.js";
import { BASE_CLASS as G, EARLIEST_PAYOUT_SINCE_DATE as H, BASE_CLASS_DETAILS as Y } from "./constants.js";
import { PayoutsTable as J } from "../PayoutsTable/PayoutsTable.js";
import { LIMIT_OPTIONS as Q, DEFAULT_PAGE_LIMIT as V } from "../../../../internal/Pagination/constants.js";
import W from "../../../../../hooks/useBalanceAccountSelection.js";
import X from "../../../../internal/FilterBar/filters/DateFilter/DateFilter.js";
import Z from "../../../../../hooks/useModalDetails/useModalDetails.js";
import $ from "../../../../../hooks/useDefaultOverviewFilterParams.js";
import { DataOverviewHeader as v } from "../../../../internal/DataOverviewDisplay/DataOverviewHeader/DataOverviewHeader.js";
import { FilterParam as o } from "../../../../types.js";
import { useCallback as D, useMemo as s, useEffect as B } from "../../../../../external/preact/hooks/dist/hooks.module.js";
import { DataDetailsModal as tt } from "../../../../internal/DataOverviewDisplay/DataDetailsModal.js";
import "./PayoutsOverview.scss.js";
import et, { useFilterBarState as rt, FilterBarMobileSwitch as it } from "../../../../internal/FilterBar/FilterBar.js";
import ot from "../../../../internal/Pagination/hooks/useCursorPaginatedRecords.js";
import st from "../../../../internal/FormFields/Select/BalanceAccountSelector/BalanceAccountSelector.js";
import { useAuthContext as at } from "../../../../../core/Auth/context.js";
import { isFunction as lt } from "../../../../../utils/value/is.js";
const Nt = ({
  onFiltersChanged: a,
  balanceAccounts: n,
  allowLimitSelection: p,
  preferredLimit: y = V,
  onRecordSelection: u,
  showDetails: l,
  isLoadingBalanceAccount: F,
  onContactSupport: f,
  hideTitle: P
}) => {
  const { getPayouts: m } = at().endpoints, { activeBalanceAccount: t, balanceAccountSelectionOptions: C, onBalanceAccountSelection: I } = W(n), { defaultParams: i, nowTimestamp: _, refreshNowTimestamp: d } = $("payouts", t), A = D(
    async (r, j) => m({ signal: j, errorLevel: "error" }, {
      query: {
        ...r,
        createdSince: r[o.CREATED_SINCE] ?? i.current.defaultFilterParams[o.CREATED_SINCE],
        createdUntil: r[o.CREATED_UNTIL] ?? i.current.defaultFilterParams[o.CREATED_UNTIL],
        balanceAccountId: (t == null ? void 0 : t.id) ?? ""
      }
    }),
    [t == null ? void 0 : t.id, i, m]
  ), c = rt(), L = s(() => lt(a) ? a : void 0, [a]), O = s(() => p ? Q : void 0, [p]), { canResetFilters: N, error: b, fetching: h, filters: E, limit: w, limitOptions: M, records: R, resetFilters: mt, updateFilters: U, updateLimit: g, ...k } = ot({
    fetchRecords: A,
    dataField: "data",
    filterParams: i.current.defaultFilterParams,
    initialFiltersSameAsDefault: !0,
    onFiltersChanged: L,
    preferredLimit: y,
    preferredLimitOptions: O,
    enabled: !!(t != null && t.id) && !!m
  });
  B(() => {
    d();
  }, [E, d]);
  const S = s(
    () => ({
      showDetails: l ?? !0,
      callback: u
    }),
    [l, u]
  ), x = s(() => ({ payout: S }), [S]), { updateDetails: T, resetDetails: q, selectedDetail: z } = Z(x), K = D(
    (r) => {
      T({
        selection: {
          type: "payout",
          data: { id: t == null ? void 0 : t.id, balanceAccountDescription: (t == null ? void 0 : t.description) || "", date: r.createdAt }
        },
        modalSize: "small"
      }).callback({ balanceAccountId: (t == null ? void 0 : t.id) || "", date: r.createdAt });
    },
    [T, t]
  );
  return /* @__PURE__ */ e("div", { className: G, children: [
    /* @__PURE__ */ e(v, { hideTitle: P, titleKey: "payoutsTitle", descriptionKey: "payoutsNotice", children: /* @__PURE__ */ e(it, { ...c }) }),
    /* @__PURE__ */ e(et, { ...c, children: [
      /* @__PURE__ */ e(
        st,
        {
          activeBalanceAccount: t,
          balanceAccountSelectionOptions: C,
          onBalanceAccountSelection: I
        }
      ),
      /* @__PURE__ */ e(
        X,
        {
          canResetFilters: N,
          defaultParams: i,
          filters: E,
          nowTimestamp: _,
          refreshNowTimestamp: d,
          sinceDate: H,
          timezone: "UTC",
          updateFilters: U
        }
      )
    ] }),
    /* @__PURE__ */ e(
      tt,
      {
        className: Y,
        onContactSupport: f,
        selectedDetail: z,
        resetDetails: q,
        children: /* @__PURE__ */ e(
          J,
          {
            loading: h || F || !n,
            data: R,
            showPagination: !0,
            onRowClick: K,
            showDetails: l,
            limit: w,
            limitOptions: M,
            onContactSupport: f,
            onLimitSelection: g,
            error: b,
            ...k
          }
        )
      }
    )
  ] });
};
export {
  Nt as PayoutsOverview
};
