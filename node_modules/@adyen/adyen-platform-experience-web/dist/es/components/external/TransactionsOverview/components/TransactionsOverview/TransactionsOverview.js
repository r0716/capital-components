import { jsx as i } from "../../../../../external/preact/jsx-runtime/dist/jsxRuntime.module.js";
import { DataDetailsModal as Ae } from "../../../../internal/DataOverviewDisplay/DataDetailsModal.js";
import { TransactionsTable as Te } from "../TransactionsTable/TransactionsTable.js";
import Se from "../../../../../hooks/useBalanceAccountSelection.js";
import Ee from "../../../../internal/FilterBar/filters/DateFilter/DateFilter.js";
import { FilterParam as t } from "../../../../types.js";
import Fe from "../../../../../hooks/useModalDetails/useModalDetails.js";
import Ne from "../../../../../core/Context/useCoreContext.js";
import { useCallback as c, useMemo as u, useState as k, useEffect as I } from "../../../../../external/preact/hooks/dist/hooks.module.js";
import { LIMIT_OPTIONS as Me, DEFAULT_PAGE_LIMIT as he } from "../../../../internal/Pagination/constants.js";
import Ie from "../TransactionTotals/TransactionTotals.js";
import { Balances as _e } from "../Balances/Balances.js";
import De from "../../../../../hooks/useDefaultOverviewFilterParams.js";
import Oe from "../../hooks/useTransactionsOverviewMultiSelectionFilters.js";
import { AmountFilter as Ue } from "../../../../internal/FilterBar/filters/AmountFilter/AmountFilter.js";
import { MAX_TRANSACTIONS_DATE_RANGE_MONTHS as ge, BASE_CLASS as be, SUMMARY_CLASS as Le, SUMMARY_ITEM_CLASS as X, BASE_CLASS_DETAILS as we } from "./constants.js";
import { useResponsiveViewport as xe, mediaQueries as Re } from "../../../../../hooks/useResponsiveViewport.js";
import { useCustomColumnsData as ve } from "../../../../../hooks/useCustomColumnsData.js";
import "./TransactionsOverview.scss.js";
import ye from "../../../../internal/Pagination/hooks/useCursorPaginatedRecords.js";
import { Header as Pe } from "../../../../internal/Header/Header.js";
import ke, { useFilterBarState as Xe, FilterBarMobileSwitch as Ge } from "../../../../internal/FilterBar/FilterBar.js";
import Ye from "../../../../internal/FormFields/Select/BalanceAccountSelector/BalanceAccountSelector.js";
import G from "../MultiSelectionFilter/MultiSelectionFilter.js";
import { useAuthContext as je } from "../../../../../core/Auth/context.js";
import { listFrom as p } from "../../../../../utils/collection/main.js";
import { isUndefined as Y, isFunction as ze } from "../../../../../utils/value/is.js";
import { EMPTY_OBJECT as He } from "../../../../../utils/value/constants.js";
const Ft = ({
  onFiltersChanged: A,
  balanceAccounts: _,
  allowLimitSelection: D,
  preferredLimit: j = he,
  onRecordSelection: O,
  showDetails: U,
  isLoadingBalanceAccount: z,
  onContactSupport: H,
  hideTitle: V,
  columns: W,
  onDataRetrieved: g
}) => {
  const { i18n: T } = Ne(), { getTransactions: S } = je().endpoints, { activeBalanceAccount: e, balanceAccountSelectionOptions: J, onBalanceAccountSelection: K } = Se(_), { defaultParams: d, nowTimestamp: E, refreshNowTimestamp: F } = De("transactions", e), Q = c(
    async ({ balanceAccount: o, ...r }, n) => S({ signal: n, errorLevel: "error" }, {
      query: {
        ...r,
        statuses: p(r[t.STATUSES]),
        categories: p(r[t.CATEGORIES]),
        currencies: p(r[t.CURRENCIES]),
        createdSince: r[t.CREATED_SINCE] ?? d.current.defaultFilterParams[t.CREATED_SINCE],
        createdUntil: r[t.CREATED_UNTIL] ?? d.current.defaultFilterParams[t.CREATED_UNTIL],
        sortDirection: "desc",
        balanceAccountId: (e == null ? void 0 : e.id) ?? "",
        minAmount: Y(r.minAmount) ? void 0 : parseFloat(r.minAmount),
        maxAmount: Y(r.maxAmount) ? void 0 : parseFloat(r.maxAmount)
      }
    }),
    [e == null ? void 0 : e.id, d, S]
  ), b = Xe(), Z = u(() => ze(A) ? A : void 0, [A]), $ = u(() => D ? Me : void 0, [D]), { canResetFilters: B, error: q, fetching: ee, filters: s, limit: te, limitOptions: re, records: f, resetFilters: Ve, updateFilters: l, updateLimit: ie, ...oe } = ye({
    fetchRecords: Q,
    dataField: "data",
    filterParams: d.current.defaultFilterParams,
    initialFiltersSameAsDefault: !0,
    onFiltersChanged: Z,
    preferredLimit: j,
    preferredLimitOptions: $,
    enabled: !!(e != null && e.id) && !!S
  }), [a, L] = k([]), [se, ne] = k(!1), le = c((o, r) => {
    L(o), ne(r);
  }, []), { categoriesFilter: w, currenciesFilter: x, statusesFilter: N } = Oe(
    {
      filters: s,
      updateFilters: l
    },
    a
  );
  I(() => {
    L(void 0), l({
      [t.BALANCE_ACCOUNT]: e == null ? void 0 : e.id,
      [t.CURRENCIES]: void 0
    });
  }, [l, e == null ? void 0 : e.id]), I(() => {
    F();
  }, [s, F]), I(() => {
    N.updateSelection({ target: { value: "Booked", name: "status" } });
  }, [N]);
  const R = xe(Re.down.sm), ae = !!a && a.length > 1, v = u(
    () => ({
      showDetails: U ?? !0,
      callback: O
    }),
    [U, O]
  ), me = u(() => ({ transaction: v }), [v]), de = c(
    ({ records: o, retrievedData: r }) => o.map((n) => ({ ...r.find((C) => C.id === n.id), ...n })),
    []
  ), { customRecords: M, loadingCustomRecords: ce } = ve({ records: f, onDataRetrieved: g, mergeCustomData: de }), { updateDetails: y, resetDetails: ue, selectedDetail: fe } = Fe(me), P = c(
    ({ id: o }) => {
      const r = f.find((m) => m.id === o), n = M.find((m) => m.id === o);
      return r && n ? Object.keys(n).reduce((C, h) => (h in r || (C[h] = n[h]), C), {}) : null;
    },
    [f, M]
  ), Ce = c(
    ({ id: o }) => {
      y({
        selection: {
          type: "transaction",
          data: o,
          balanceAccount: e || "",
          extraDetails: P({ id: o }) ?? He
        },
        modalSize: "small"
      }).callback({ id: o });
    },
    [e, y, P]
  ), pe = u(() => {
    const o = new Date(E);
    return o.setMonth(o.getMonth() - ge), o.toString();
  }, [E]);
  return /* @__PURE__ */ i("div", { className: be, children: [
    /* @__PURE__ */ i(Pe, { hideTitle: V, titleKey: "transactionsOverviewTitle", children: /* @__PURE__ */ i(Ge, { ...b }) }),
    /* @__PURE__ */ i(ke, { ...b, children: [
      /* @__PURE__ */ i(
        Ye,
        {
          activeBalanceAccount: e,
          balanceAccountSelectionOptions: J,
          onBalanceAccountSelection: K
        }
      ),
      /* @__PURE__ */ i(
        Ee,
        {
          canResetFilters: B,
          defaultParams: d,
          filters: s,
          nowTimestamp: E,
          refreshNowTimestamp: F,
          sinceDate: pe,
          timezone: e == null ? void 0 : e.timeZone,
          updateFilters: l
        }
      ),
      /* @__PURE__ */ i(G, { ...w, placeholder: T.get("filterPlaceholder.category") }),
      /* @__PURE__ */ i(
        Ue,
        {
          availableCurrencies: a,
          selectedCurrencies: p(s[t.CURRENCIES]),
          name: "range",
          label: T.get("amount"),
          minAmount: s[t.MIN_AMOUNT],
          maxAmount: s[t.MAX_AMOUNT],
          updateFilters: l,
          onChange: l
        }
      ),
      /* @__PURE__ */ i(G, { ...x, placeholder: T.get("filterPlaceholder.currency") })
    ] }),
    /* @__PURE__ */ i("div", { className: Le, children: [
      /* @__PURE__ */ i("div", { className: X, children: /* @__PURE__ */ i(
        Ie,
        {
          availableCurrencies: a,
          isAvailableCurrenciesFetching: se,
          balanceAccountId: e == null ? void 0 : e.id,
          statuses: N.selection,
          categories: w.selection,
          createdUntil: s[t.CREATED_UNTIL],
          createdSince: s[t.CREATED_SINCE],
          currencies: x.selection,
          minAmount: s[t.MIN_AMOUNT] ? parseFloat(s[t.MIN_AMOUNT]) : void 0,
          maxAmount: s[t.MAX_AMOUNT] ? parseFloat(s[t.MAX_AMOUNT]) : void 0,
          fullWidth: R
        }
      ) }),
      /* @__PURE__ */ i("div", { className: X, children: /* @__PURE__ */ i(
        _e,
        {
          balanceAccountId: e == null ? void 0 : e.id,
          onCurrenciesChange: le,
          defaultCurrencyCode: e == null ? void 0 : e.defaultCurrencyCode,
          fullWidth: R
        }
      ) })
    ] }),
    /* @__PURE__ */ i(
      Ae,
      {
        selectedDetail: fe,
        resetDetails: ue,
        className: we,
        children: /* @__PURE__ */ i(
          Te,
          {
            activeBalanceAccount: e,
            availableCurrencies: a,
            error: q,
            hasMultipleCurrencies: ae,
            limit: te,
            limitOptions: re,
            loading: ee || z || !_ || ce,
            onContactSupport: H,
            onLimitSelection: ie,
            onRowClick: Ce,
            showPagination: !0,
            transactions: g ? M : f,
            customColumns: W,
            ...oe
          }
        )
      }
    )
  ] });
};
export {
  Ft as TransactionsOverview
};
