import { jsx as i } from "../../../../../external/preact/jsx-runtime/dist/jsxRuntime.module.js";
import { useCallback as y, useMemo as p, useEffect as M } from "../../../../../external/preact/hooks/dist/hooks.module.js";
import { useFetch as W } from "../../../../../hooks/useFetch.js";
import { memo as g } from "../../../../../external/preact/compat/dist/compat.module.js";
import { BASE_CLASS as w } from "./constants.js";
import F from "../../../../internal/ExpandableCard/ExpandableCard.js";
import { BaseList as L } from "../../../../internal/BaseList/BaseList.js";
import { BalanceItem as u } from "../BalanceItem/BalanceItem.js";
import { useMaxWidthsState as O } from "../../hooks/useMaxWidths.js";
import { useAuthContext as T } from "../../../../../core/Auth/context.js";
import { EMPTY_OBJECT as q } from "../../../../../utils/value/constants.js";
const G = g(({ balanceAccountId: o, defaultCurrencyCode: m, onCurrenciesChange: h, fullWidth: S }) => {
  const { getBalances: s } = T().endpoints, x = y(async () => s == null ? void 0 : s(q, {
    path: { balanceAccountId: o }
  }), [o, s]), { data: t, error: B, isFetching: a } = W({
    fetchOptions: p(() => ({ enabled: !!o && !!s }), [o, s]),
    queryFn: x
  }), f = !o || a, E = !!B || !(t != null && t.data.length), e = p(() => (t == null ? void 0 : t.data) && [...t.data].sort(({ currency: r }, { currency: n }) => {
    if (m) {
      if (r === m)
        return -1;
      if (n === m)
        return 1;
    }
    return r.localeCompare(n);
  }), [t == null ? void 0 : t.data, m]), [k, ...l] = p(() => (e == null ? void 0 : e.map((r) => (r.key = `${r.currency}-${Math.random()}`, r))) ?? [], [e]), [c, d] = O();
  return M(() => {
    const r = new Set((e == null ? void 0 : e.map(({ currency: n }) => n)) || []);
    h(Array.from(r), a);
  }, [e, a, h]), /* @__PURE__ */ i("div", { className: w, children: /* @__PURE__ */ i(
    F,
    {
      renderHeader: /* @__PURE__ */ i(
        u,
        {
          isEmpty: E,
          balance: k,
          widths: c,
          isHeader: !0,
          isSkeleton: f,
          isLoading: f,
          onWidthsSet: d
        }
      ),
      filled: !0,
      fullWidth: S,
      children: l.length && /* @__PURE__ */ i(L, { children: l.map((r) => /* @__PURE__ */ i("li", { children: /* @__PURE__ */ i(u, { balance: r, widths: c, onWidthsSet: d }) }, r.key)) })
    }
  ) });
});
export {
  G as Balances
};
