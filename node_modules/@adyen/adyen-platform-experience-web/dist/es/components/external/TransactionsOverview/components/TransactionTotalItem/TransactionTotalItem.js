import { jsx as x } from "../../../../../external/preact/jsx-runtime/dist/jsxRuntime.module.js";
import b from "../../../../../core/Context/useCoreContext.js";
import { useRef as s, useMemo as C } from "../../../../../external/preact/hooks/dist/hooks.module.js";
import { SummaryItem as k } from "../SummaryItem/SummaryItem.js";
const S = ({
  total: e,
  hiddenField: n,
  isHeader: t = !1,
  isHovered: i = !1,
  isSkeleton: r = !1,
  isLoading: c = !1,
  widths: u,
  onWidthsSet: l
}) => {
  const { i18n: o } = b(), m = s(null), f = s(null), g = s(null), a = C(() => {
    const p = {
      labelKey: "totalIncoming",
      ref: m,
      skeletonWidth: 80,
      getValue: () => e && o.amount(e.incomings, e.currency),
      tooltipLabel: "tooltip.totalIncoming"
    }, y = {
      labelKey: "totalOutgoing",
      ref: f,
      skeletonWidth: 80,
      getValue: () => e && o.amount(e.expenses, e.currency),
      tooltipLabel: "tooltip.totalOutgoing"
    };
    return [
      ...n !== "incomings" ? [p] : [],
      ...n !== "expenses" ? [y] : [],
      {
        ref: g,
        skeletonWidth: 40,
        valueHasLabelStyle: !0,
        getValue: () => e == null ? void 0 : e.currency
      }
    ];
  }, [e, n, o]);
  return /* @__PURE__ */ x(
    k,
    {
      isHovered: i,
      isEmpty: !e,
      columnConfigs: a,
      isHeader: t,
      isSkeletonVisible: r,
      isLoading: c,
      widths: u,
      onWidthsSet: l
    }
  );
};
export {
  S as TransactionTotalItem
};
