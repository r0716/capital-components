import { jsx as t } from "../../../../../external/preact/jsx-runtime/dist/jsxRuntime.module.js";
import { useState as x, useCallback as F, useMemo as Y } from "../../../../../external/preact/hooks/dist/hooks.module.js";
import k from "../Category/Category.js";
import H from "../../../../internal/DataOverviewError/DataOverviewError.js";
import $ from "../../../../../core/Context/useCoreContext.js";
import { getCurrencyCode as I } from "../../../../../core/Localization/amount/amount-util.js";
import P from "../../../../../hooks/useTimezoneAwareDateFormatting.js";
import { CellTextPosition as V } from "../../../../internal/DataGrid/types.js";
import { TypographyVariant as n } from "../../../../internal/Typography/types.js";
import a from "../../../../internal/Typography/Typography.js";
import { useResponsiveViewport as p, mediaQueries as d } from "../../../../../hooks/useResponsiveViewport.js";
import { BASE_CLASS as B, AMOUNT_CLASS as G, DATE_AND_PAYMENT_METHOD_CLASS as U, DATE_METHOD_CLASS as W } from "./constants.js";
import "./TransactionTable.scss.js";
import A from "./PaymentMethodCell.js";
import { useTableColumns as j } from "../../../../../hooks/useTableColumns.js";
import f from "../../../../internal/DataGrid/DataGrid.js";
import { DATE_FORMAT_TRANSACTIONS_MOBILE as q, DATE_FORMAT_TRANSACTIONS as z } from "../../../../../constants/dateFormats.js";
import K from "../../../../internal/Pagination/Pagination.js";
const Q = ["createdAt", "paymentMethod", "transactionType", "amount"], fo = ({
  activeBalanceAccount: s,
  availableCurrencies: i,
  error: m,
  hasMultipleCurrencies: c,
  loading: h,
  onContactSupport: l,
  onRowClick: M,
  showDetails: X,
  showPagination: g,
  transactions: D,
  customColumns: S,
  ...C
}) => {
  const { i18n: e } = $(), { dateFormat: T } = P(s == null ? void 0 : s.timeZone), [_, u] = x(), y = p(d.up.sm), E = p(d.up.md), O = p(d.down.xs), v = e.get("amount"), w = j({
    fields: Q,
    customColumns: S,
    columnConfig: {
      amount: {
        label: c ? void 0 : `${v} ${i && i[0] ? `(${I(i[0])})` : ""}`,
        position: V.RIGHT,
        flex: y ? 1.5 : void 0
      },
      transactionType: { visible: E },
      paymentMethod: { visible: y }
    }
  }), N = {
    title: "noTransactionsFound",
    message: ["tryDifferentSearchOrResetYourFiltersAndWeWillTryAgain"]
  }, R = F(
    (o) => {
      u(o ?? void 0);
    },
    [u]
  ), b = Y(
    () => () => /* @__PURE__ */ t(H, { error: m, onContactSupport: l, errorMessage: "weCouldNotLoadYourTransactions" }),
    [m, l]
  );
  return /* @__PURE__ */ t("div", { className: B, children: /* @__PURE__ */ t(
    f,
    {
      errorDisplay: b,
      error: m,
      columns: w,
      data: D,
      loading: h,
      outline: !1,
      onRowClick: { callback: M },
      onRowHover: R,
      emptyTableMessage: N,
      customCells: {
        // Remove status column temporarily
        /* status: ({ value }) => {
            return (
                <Tag
                    label={i18n.get(value)}
                    variant={value === 'Booked' ? TagVariant.SUCCESS : value === 'Reversed' ? TagVariant.ERROR : TagVariant.DEFAULT}
                />
            );
        },*/
        transactionType: ({ item: o, rowIndex: r }) => {
          const L = `tooltip.${o.category}`;
          return o.category ? e.has(L) ? /* @__PURE__ */ t(k, { isContainerHovered: r === _, value: o.category }) : /* @__PURE__ */ t(a, { variant: n.BODY, children: e.has(`txType.${o.category}`) ? e.get(`txType.${o.category}`) : `${o.category}` }) : null;
        },
        amount: ({ value: o }) => {
          const r = e.amount(o.value, o.currency, { hideCurrency: !c });
          return /* @__PURE__ */ t(a, { variant: n.BODY, className: G, children: r });
        },
        createdAt: ({ item: o, value: r }) => O ? /* @__PURE__ */ t("div", { className: U, children: [
          /* @__PURE__ */ t(A, { paymentMethod: o.paymentMethod, bankAccount: o.bankAccount }),
          /* @__PURE__ */ t(a, { variant: n.BODY, className: W, children: T(o.createdAt, q) })
        ] }) : /* @__PURE__ */ t(a, { variant: n.BODY, children: T(r, z) }),
        paymentMethod: ({ item: o }) => /* @__PURE__ */ t(A, { paymentMethod: o.paymentMethod, bankAccount: o.bankAccount })
      },
      children: g && /* @__PURE__ */ t(f.Footer, { children: /* @__PURE__ */ t(K, { ...C }) })
    }
  ) });
};
export {
  Q as TRANSACTION_FIELDS,
  fo as TransactionsTable
};
