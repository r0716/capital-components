import { jsx as r } from "../../../../../external/preact/jsx-runtime/dist/jsxRuntime.module.js";
import { useState as B, useMemo as n, useCallback as Y } from "../../../../../external/preact/hooks/dist/hooks.module.js";
import M from "../../../../../core/Context/useCoreContext.js";
import P from "../../../../../hooks/useFreezePeriod.js";
import I from "../../../../../hooks/useTimezoneAwareDateFormatting.js";
import x from "../../../../internal/Alert/Alert.js";
import { AlertTypeOption as V } from "../../../../internal/Alert/types.js";
import q from "../../../../internal/Button/DownloadButton/DownloadButton.js";
import { CellTextPosition as z } from "../../../../internal/DataGrid/types.js";
import G from "../../../../internal/DataOverviewError/DataOverviewError.js";
import U from "../../../../internal/SVGIcons/Warning.js";
import { TypographyVariant as a } from "../../../../internal/Typography/types.js";
import i from "../../../../internal/Typography/Typography.js";
import { getLabel as $ } from "../../../../utils/getLabel.js";
import { useResponsiveViewport as D, mediaQueries as g } from "../../../../../hooks/useResponsiveViewport.js";
import { BASE_CLASS as j, DATE_TYPE_CLASS as H, DATE_TYPE_DATE_SECTION_CLASS as Q, DISABLED_BUTTONS_TIMEOUT as X } from "./constants.js";
import "./ReportsTable.scss.js";
import E from "../../../../internal/DataGrid/DataGrid.js";
import { DATE_FORMAT_REPORTS as h } from "../../../../../constants/dateFormats.js";
import k from "../../../../internal/Pagination/Pagination.js";
import { useAuthContext as J } from "../../../../../core/Auth/context.js";
const K = ["createdAt", "dateAndReportType", "reportType", "reportFile"], Ee = ({
  error: s,
  loading: p,
  balanceAccountId: w,
  onContactSupport: l,
  showPagination: _,
  data: T,
  ...R
}) => {
  const { i18n: t } = M(), { dateFormat: A } = I("UTC"), { freeze: S, frozen: b } = P(X), [u, d] = B(null), { refreshing: f } = J(), C = n(() => p || f, [p, f]), m = D(g.up.sm), c = D(g.down.xs), y = n(
    () => ({
      dateAndReportType: c,
      createdAt: m,
      reportType: m,
      reportFile: !0
    }),
    [c, m]
  ), F = n(
    () => K.map((e) => {
      const o = t.get($(e));
      return {
        key: e,
        label: o,
        position: c && e === "reportFile" ? z.RIGHT : void 0,
        visible: y[e]
      };
    }),
    [t, T, y]
  ), O = Y(() => {
    d(null);
  }, []), N = {
    title: "noReportsFound",
    message: ["tryDifferentSearchOrResetYourFiltersAndWeWillTryAgain"]
  }, v = n(
    () => () => /* @__PURE__ */ r(G, { error: s, errorMessage: "weCouldNotLoadYourReports", onContactSupport: l }),
    [s, l]
  ), L = n(() => /* @__PURE__ */ r(U, {}), []), W = n(
    () => (e) => {
      const o = {};
      switch (e == null ? void 0 : e.errorCode) {
        case "999_429_001":
          o.title = t.get("error.somethingWentWrongWithDownload"), o.description = t.get("reportsError.tooManyDownloads");
          break;
        case "00_500":
        default:
          o.title = t.get("error.somethingWentWrongWithDownload"), o.description = t.get("error.pleaseTryAgainLater");
          break;
      }
      d(o);
    },
    [s, l]
  );
  return p && d(null), /* @__PURE__ */ r("div", { className: j, children: [
    u && /* @__PURE__ */ r(x, { onClose: O, type: V.WARNING, className: "adyen-pe-reports-table-alert", ...u }),
    /* @__PURE__ */ r(
      E,
      {
        errorDisplay: v,
        error: s,
        columns: F,
        data: T,
        loading: C,
        outline: !1,
        emptyTableMessage: N,
        customCells: {
          createdAt: ({ value: e }) => e ? e && /* @__PURE__ */ r(i, { variant: a.BODY, children: A(e, h) }) : null,
          dateAndReportType: ({ item: e }) => /* @__PURE__ */ r("div", { className: H, children: [
            /* @__PURE__ */ r(i, { variant: a.BODY, stronger: !0, children: t.get(`reportType.${e == null ? void 0 : e.type}`) }),
            /* @__PURE__ */ r(i, { className: Q, variant: a.BODY, children: A(e.createdAt, h) })
          ] }),
          reportType: ({ item: e }) => (e == null ? void 0 : e.type) && /* @__PURE__ */ r(i, { variant: a.BODY, children: t.get(`reportType.${e == null ? void 0 : e.type}`) }),
          reportFile: ({ item: e }) => {
            const o = {
              query: { balanceAccountId: w, createdAt: e.createdAt, type: e.type }
            };
            return /* @__PURE__ */ r(
              q,
              {
                className: "adyen-pe-reports-table--download",
                endpointName: "downloadReport",
                disabled: b,
                params: o,
                onDownloadRequested: S,
                setError: W,
                errorDisplay: L
              }
            );
          }
        },
        children: _ && /* @__PURE__ */ r(E.Footer, { children: /* @__PURE__ */ r(k, { ...R }) })
      }
    )
  ] });
};
export {
  Ee as ReportsTable
};
