import { jsx as e } from "../../../../../external/preact/jsx-runtime/dist/jsxRuntime.module.js";
import { useMemo as T } from "../../../../../external/preact/hooks/dist/hooks.module.js";
import c from "classnames";
import g from "../../../../../core/Context/useCoreContext.js";
import f from "../../../../../hooks/useTimezoneAwareDateFormatting.js";
import i from "../../../../internal/Typography/Typography.js";
import { TypographyVariant as n, TypographyElement as p } from "../../../../internal/Typography/types.js";
import y from "../../../../internal/Card/Card.js";
import { Tag as u } from "../../../../internal/Tag/Tag.js";
import { GRANT_ITEM_CLASS_NAMES as o } from "./constants.js";
import { getGrantConfig as v } from "./utils.js";
import "./GrantItem.scss.js";
import { GrantDetails as h } from "../GrantDetails/GrantDetails.js";
import { GrantAction as C } from "../GrantAction/GrantAction.js";
import N from "../../../../internal/CopyText/CopyText.js";
import { Tooltip as I } from "../../../../internal/Tooltip/Tooltip.js";
import x from "../../../../internal/Alert/Alert.js";
import { AlertTypeOption as b } from "../../../../internal/Alert/types.js";
import { Fragment as d } from "../../../../../external/preact/dist/preact.module.js";
import E from "../../../../internal/ProgressBar/ProgressBar.js";
import { DATE_FORMAT_CAPITAL_OVERVIEW as S } from "../../../../../constants/dateFormats.js";
const J = ({ grant: r }) => {
  var s, m;
  const { i18n: a } = g(), { dateFormat: A } = f(), t = T(() => v(r), [r]);
  return /* @__PURE__ */ e("div", { className: o.base, children: [
    /* @__PURE__ */ e(y, { classNameModifiers: [o.overview], filled: t.isBackgroundFilled, testId: "grant-container", children: /* @__PURE__ */ e("div", { className: o.cardContent, children: [
      /* @__PURE__ */ e("div", { className: o.statusContainer, children: [
        /* @__PURE__ */ e(
          i,
          {
            variant: n.CAPTION,
            className: c({ [o.textSecondary]: t.isLabelColorSecondary }),
            testId: "grant-amount-label",
            children: a.get(t.amountLabelKey)
          }
        ),
        /* @__PURE__ */ e("div", { children: r.status === "Active" ? /* @__PURE__ */ e(d, { children: [
          /* @__PURE__ */ e(i, { variant: n.CAPTION, el: p.SPAN, children: a.get("capital.termEnds") }),
          /* @__PURE__ */ e(i, { variant: n.CAPTION, stronger: !0, el: p.SPAN, children: A(t.repaymentPeriodEndDate, S) })
        ] }) : t.statusKey ? t.statusTooltipKey ? /* @__PURE__ */ e(I, { content: a.get(t.statusTooltipKey), children: /* @__PURE__ */ e("div", { children: /* @__PURE__ */ e(u, { label: a.get(t.statusKey), variant: t.statusTagVariant }) }) }) : /* @__PURE__ */ e(u, { label: a.get(t.statusKey), variant: t.statusTagVariant }) : null })
      ] }),
      /* @__PURE__ */ e(
        i,
        {
          variant: n.TITLE,
          medium: !0,
          className: c({
            [o.textSecondary]: t.isAmountColorSecondary
          }),
          children: a.amount(t.amount.value, t.amount.currency)
        }
      ),
      t.isProgressBarVisible && /* @__PURE__ */ e(
        E,
        {
          className: o.progressBar,
          value: r.repaidTotalAmount.value,
          max: r.totalAmount.value,
          labels: { current: a.get("capital.repaid"), max: a.get("capital.remaining") },
          tooltips: {
            remaining: `${a.amount(r.remainingTotalAmount.value, r.remainingTotalAmount.currency)} ${(s = a.get("capital.remaining")) == null ? void 0 : s.toLowerCase()}`,
            progress: `${a.amount(r.repaidTotalAmount.value, r.repaidTotalAmount.currency)} ${(m = a.get("capital.repaid")) == null ? void 0 : m.toLowerCase()}`
          }
        }
      ),
      t.isGrantIdVisible ? /* @__PURE__ */ e("div", { className: o.grantID, children: /* @__PURE__ */ e(N, { textToCopy: r.id, buttonLabel: a.get("capital.grantID"), isHovered: !0, type: "Text" }) }) : null
    ] }) }),
    t.hasDetails && /* @__PURE__ */ e(h, { grant: r }),
    t.hasAlerts && /* @__PURE__ */ e(d, { children: r.missingActions && r.missingActions.length ? r.missingActions.map((l) => /* @__PURE__ */ e(
      C,
      {
        action: l,
        className: o.alert,
        offerExpiresAt: r.offerExpiresAt
      },
      l.type
    )) : /* @__PURE__ */ e(
      x,
      {
        className: o.alert,
        type: b.HIGHLIGHT,
        title: a.get("capital.weReceivedYourRequestAndWeAreWorkingOnItNowCheckBackSoon")
      }
    ) })
  ] });
};
export {
  J as GrantItem
};
