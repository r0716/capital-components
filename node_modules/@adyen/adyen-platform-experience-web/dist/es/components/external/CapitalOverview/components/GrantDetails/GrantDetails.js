import { jsx as a } from "../../../../../external/preact/jsx-runtime/dist/jsxRuntime.module.js";
import { useCallback as s, useMemo as p } from "../../../../../external/preact/hooks/dist/hooks.module.js";
import y from "../../../../../core/Context/useCoreContext.js";
import r from "../../../../internal/Typography/Typography.js";
import { TypographyElement as o, TypographyVariant as m } from "../../../../internal/Typography/types.js";
import { GRANT_DETAILS_CLASS_NAMES as l } from "./constants.js";
import "./GrantDetails.scss.js";
import { ExpandableContainer as d } from "../../../../internal/ExpandableContainer/ExpandableContainer.js";
import { getPaymentRatePercentage as A } from "../../../CapitalOffer/components/utils/utils.js";
import { Tooltip as v } from "../../../../internal/Tooltip/Tooltip.js";
import { CAPITAL_REPAYMENT_FREQUENCY as h } from "../../../../constants.js";
import P from "../../../../internal/StructuredList/StructuredList.js";
const F = ({ grant: e }) => {
  const { i18n: t } = y(), n = s((i) => t.amount(i.value, i.currency), [t]), u = p(() => {
    const i = e.maximumRepaymentPeriodDays ? Math.ceil(e.maximumRepaymentPeriodDays / 30) : null, c = [
      {
        key: "capital.remainingAmount",
        value: t.amount(e.remainingGrantAmount.value, e.remainingGrantAmount.currency)
      },
      { key: "capital.remainingFees", value: n(e.remainingFeesAmount) },
      { key: "capital.repaidAmount", value: n(e.repaidGrantAmount) },
      { key: "capital.repaidFees", value: n(e.repaidFeesAmount) },
      {
        key: "capital.dailyRepaymentRate",
        value: `${t.get("capital.xPercent", {
          values: { percentage: A(e.repaymentRate) }
        })}`
      },
      {
        key: "capital.expectedRepaymentPeriod",
        value: t.get("capital.daysAndDaysLeft", {
          values: {
            days: e.expectedRepaymentPeriodDays,
            daysLeft: e.repaymentPeriodLeft
          }
        })
      },
      { key: "capital.totalFees", value: n(e.feesAmount) },
      { key: "capital.totalRepaymentAmount", value: n(e.totalAmount) },
      { key: "capital.repaymentThreshold", value: n(e.thresholdAmount) },
      { key: "capital.grantID", value: e.id },
      { key: "accountDescription", value: e.balanceAccountDescription },
      { key: "accountID", value: e.balanceAccountCode }
    ];
    return i && c.splice(5, 0, {
      key: "capital.maximumRepaymentPeriod",
      value: t.get("capital.xMonths", { values: { months: i } })
    }), c;
  }, [e, n, t]);
  return /* @__PURE__ */ a(d, { className: l.base, children: /* @__PURE__ */ a("div", { className: l.content, children: [
    /* @__PURE__ */ a("div", { className: l.header, children: [
      /* @__PURE__ */ a(r, { el: o.SPAN, variant: m.BODY, children: t.get("capital.yourRequestedFundsWere") }),
      /* @__PURE__ */ a(r, { el: o.SPAN, variant: m.BODY, strongest: !0, children: t.amount(e.grantAmount.value, e.grantAmount.currency) })
    ] }),
    /* @__PURE__ */ a(
      P,
      {
        renderLabel: (i, c) => c === "capital.repaymentThreshold" ? /* @__PURE__ */ a(
          v,
          {
            isContainerHovered: !0,
            content: t.get("capital.minimumRepaymentToRepayTheFinancingOnTime", {
              values: { days: h }
            }),
            children: /* @__PURE__ */ a("span", { children: /* @__PURE__ */ a(
              r,
              {
                className: l.label,
                el: o.SPAN,
                variant: m.CAPTION,
                children: i
              }
            ) })
          }
        ) : /* @__PURE__ */ a(r, { className: l.label, el: o.SPAN, variant: m.CAPTION, children: i }),
        renderValue: (i) => /* @__PURE__ */ a(r, { el: o.SPAN, stronger: !0, variant: m.CAPTION, children: i }),
        items: u
      }
    )
  ] }) });
};
export {
  F as GrantDetails
};
