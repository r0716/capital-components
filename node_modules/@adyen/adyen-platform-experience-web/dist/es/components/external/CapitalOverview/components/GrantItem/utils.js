import { TagVariant as s } from "../../../../internal/Tag/types.js";
const r = (e) => e === "Active", o = (e) => e === "Repaid", u = (e) => e === "Active" ? "capital.remaining" : "capital.requestedFunds", c = (e) => e.status === "Active" ? e.remainingTotalAmount : e.grantAmount, d = ({ status: e, missingActions: t }) => {
  switch (e) {
    case "Active":
      return;
    case "Failed":
      return "capital.failed";
    case "Pending":
      return t && t.length ? "capital.actionNeeded" : "capital.pending";
    case "Repaid":
      return "capital.fullyRepaid";
    case "Revoked":
      return "capital.revoked";
    case "WrittenOff":
      return "capital.writtenOff";
  }
}, l = ({ status: e, missingActions: t }) => {
  switch (e) {
    case "Failed":
      return s.ERROR;
    case "Pending":
      return t != null && t.length ? s.WARNING : s.DEFAULT;
    case "Repaid":
      return s.LIGHT;
    case "Revoked":
    case "WrittenOff":
      return s.WARNING;
    default:
      return s.DEFAULT;
  }
}, p = (e) => {
  const t = /* @__PURE__ */ new Date(), a = /* @__PURE__ */ new Date();
  return a.setDate(t.getDate() + e), a;
}, T = (e) => {
  var a, n;
  const t = ((a = e.missingActions) == null ? void 0 : a.some((i) => i.type === "signToS")) || !1;
  switch (e.status) {
    case "Pending":
      return (n = e.missingActions) != null && n.length ? t ? "capital.signTheTermsToReceiveYourFunds" : void 0 : "capital.youShouldGetTheFundsWithinOneBusinessDay";
    case "Failed":
      return "capital.weCouldNotProcessThisRequestTryAgain";
    case "WrittenOff":
      return "capital.youAcceptedTheseFundsButDidNotRepayThem";
    case "Revoked":
      return "capital.youAcceptedButThenReturnedTheseFunds";
    default:
      return;
  }
}, g = (e) => {
  const t = e.status === "Active", a = e.status === "Pending";
  return {
    amount: c(e),
    amountLabelKey: u(e.status),
    hasAlerts: a,
    hasDetails: r(e.status),
    isAmountColorSecondary: !t,
    isBackgroundFilled: o(e.status),
    isGrantIdVisible: !t,
    isLabelColorSecondary: t,
    isProgressBarVisible: t,
    repaymentPeriodEndDate: p(e.repaymentPeriodLeft),
    statusKey: d(e),
    statusTagVariant: l(e),
    statusTooltipKey: T(e)
  };
};
export {
  g as getGrantConfig,
  T as getStatusTooltipKey
};
