import { isEmptyString as l } from "../../../../../../utils/value/string.js";
import { struct as g } from "../../../../../../utils/struct/main.js";
import { enumerable as d, getter as e } from "../../../../../../utils/struct/property.js";
import { EMPTY_ARRAY as T } from "../../../../../../utils/value/constants.js";
import { isNullish as k, isFunction as b } from "../../../../../../utils/value/is.js";
const x = () => {
  let [t, i, a, o] = T;
  const m = () => !!(t && t === o && a), u = () => !!(t && t === a && o);
  let n = null;
  const v = () => {
    m() && (i = t, t = a, c());
  }, p = () => {
    u() && (i = t, t = o, c());
  }, N = (r, s) => {
    const f = t;
    t = i = a = o = void 0, !l(r) && !l(s) && (a = r, o = s, t = f === a || f === o ? f : a, f !== t && c());
  }, w = (r) => {
    k(r) ? n = null : b(r) && n !== (n = r) && c();
  }, c = () => {
    const r = i, s = t;
    i = void 0, n == null || n(
      g({
        from: e(() => r),
        to: e(() => s)
      })
    );
  };
  return g({
    backward: d(v),
    forward: d(p),
    canNavigateBackward: e(m),
    canNavigateForward: e(u),
    currentTransaction: e(() => t),
    onNavigation: { set: w },
    reset: d(N)
  });
}, B = x;
export {
  x as createDuplexTransactionNavigator,
  B as default
};
