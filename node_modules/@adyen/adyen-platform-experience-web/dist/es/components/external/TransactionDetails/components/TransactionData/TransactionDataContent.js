import { jsx as e } from "../../../../../external/preact/jsx-runtime/dist/jsxRuntime.module.js";
import L from "classnames";
import { useState as A, useMemo as B, useCallback as i, useLayoutEffect as U } from "../../../../../external/preact/hooks/dist/hooks.module.js";
import ce from "../../../../../core/Context/useCoreContext.js";
import { useFetch as se } from "../../../../../hooks/useFetch.js";
import N from "../../../../internal/Alert/Alert.js";
import { AlertTypeOption as M, AlertVariantOption as D } from "../../../../internal/Alert/types.js";
import le from "../../../../internal/Button/ButtonActions/ButtonActions.js";
import { ButtonActionsLayoutBasic as me } from "../../../../internal/Button/ButtonActions/types.js";
import { ButtonVariant as k } from "../../../../internal/Button/types.js";
import de from "../../../../internal/DataOverviewDetails/DataOverviewDetailsSkeleton.js";
import { TypographyModifier as ue, TypographyVariant as F } from "../../../../internal/Typography/types.js";
import w from "../../../../internal/Typography/Typography.js";
import { ActiveView as a, RefundMode as I } from "../../context/types.js";
import { TX_DATA_ACTION_BAR as fe, TX_REFUND_STATUSES_CONTAINER as pe, TX_REFUND_RESPONSE_ICON as V, TX_REFUND_RESPONSE_ERROR_ICON as Te, TX_REFUND_RESPONSE_SUCCESS_ICON as Ae, TX_STATUS_BOX as Re, TX_DATA_CLASS as Ee, TX_REFUND_RESPONSE as Se } from "../constants.js";
import _e from "../details/TransactionDataProperties.js";
import X from "../details/TransactionDetailsDataContainer.js";
import Ne from "../details/TransactionStatusBox.js";
import { TransactionRefundFullAmountInput as De, TransactionRefundPartialAmountInput as Ie } from "../refund/TransactionRefundAmount.js";
import he from "../refund/TransactionRefundNotice.js";
import be from "../refund/TransactionRefundReason.js";
import "./TransactionData.scss.js";
import ve from "../../hooks/useTransaction/useTransaction.js";
import ye from "../../hooks/useTransactionRefundMetadata/useTransactionRefundMetadata.js";
import x from "../../../../internal/Icon/Icon.js";
import H from "../../../../internal/Button/Button.js";
import { TransactionRefundProvider as Ce } from "../../context/refund/context.js";
import { TransactionDetailsProvider as Oe } from "../../context/details/context.js";
import { EMPTY_ARRAY as Pe, EMPTY_OBJECT as ge } from "../../../../../utils/value/constants.js";
import { useAuthContext as Le } from "../../../../../core/Auth/context.js";
const Y = ({
  children: c,
  renderViewActionButtons: s,
  renderViewMessageBox: o
}) => /* @__PURE__ */ e("div", { className: Ee, children: [
  c,
  o && o(),
  s()
] }), $ = ({
  action: c,
  title: s,
  renderIcon: o,
  subtitle: l
}) => /* @__PURE__ */ e("div", { className: Se, children: [
  o && o(),
  /* @__PURE__ */ e(w, { className: ue.MEDIUM, variant: F.TITLE, children: s }),
  /* @__PURE__ */ e(w, { variant: F.BODY, children: l }),
  c && c()
] }), Be = ({ transaction: c, extraFields: s }) => {
  var g;
  const [o, l] = A(a.DETAILS), [h, G] = A(), [b, j] = A(), [m, v] = A(!1), { fetchingTransaction: q, refreshTransaction: p, transaction: n, transactionNavigator: W } = ve(c), {
    refundable: z,
    refundableAmount: J,
    refundableAmountLabel: R,
    refundAvailable: K,
    refundCurrency: Q,
    refundDisabled: y,
    refundedState: Z,
    refundStatuses: d,
    refundMode: T,
    refundLocked: E
  } = ye(n), u = B(() => y || m, [y, m]), { i18n: r } = ce(), ee = Object.freeze((n == null ? void 0 : n.lineItems) ?? Pe), te = i((t) => G(t), []), ne = i((t) => j(t), []), S = i(
    (t) => t === a.REFUND && u,
    [u]
  ), { getBalanceAccounts: f } = Le().endpoints, { data: _ } = se(
    B(
      () => ({
        fetchOptions: {
          enabled: !!f && !n.balanceAccount && !!n.balanceAccountId,
          keepPrevData: !0
        },
        queryFn: async () => f == null ? void 0 : f(ge)
      }),
      [n.balanceAccountId, n.balanceAccount, f]
    )
  ), re = i(
    (t) => void (S(t) || l(t)),
    [S]
  ), C = i(() => {
    const t = [h, b].filter(Boolean);
    return t.length ? /* @__PURE__ */ e(X, { className: fe, children: /* @__PURE__ */ e(le, { actions: t, layout: me.BUTTONS_END }) }) : null;
  }, [h, b]), oe = i(() => {
    p(), v(!0);
  }, [v, p]), ae = i(() => d != null && d.length || E || m ? /* @__PURE__ */ e("div", { className: pe, children: [
    (E || m) && /* @__PURE__ */ e(
      N,
      {
        type: M.HIGHLIGHT,
        variant: D.TIP,
        description: `${r.get("refund.theRefundIsBeingProcessed")} ${r.get("pleaseComeBackLater")}`
      }
    ),
    d.map((t, ie) => /* @__PURE__ */ e(
      N,
      {
        variant: D.TIP,
        type: (t == null ? void 0 : t.type) ?? M.HIGHLIGHT,
        description: t == null ? void 0 : t.label
      },
      `${Math.random()}-${ie}`
    ))
  ] }) : null, [r, d, E, m]), O = n.balanceAccount ?? ((g = _ == null ? void 0 : _.data) == null ? void 0 : g.find((t) => t.id === n.balanceAccountId));
  if (U(() => {
    l(a.DETAILS);
  }, [n]), U(() => {
    u && l(a.DETAILS);
  }, [u]), q)
    return /* @__PURE__ */ e(de, { skeletonRowNumber: 5 });
  if (S(o))
    return null;
  const P = {
    lineItems: ee,
    refundAvailable: K,
    refundDisabled: u,
    setActiveView: re,
    setPrimaryAction: te,
    setSecondaryAction: ne
  };
  switch (o) {
    case a.DETAILS:
      return /* @__PURE__ */ e(Y, { renderViewActionButtons: C, renderViewMessageBox: ae, children: /* @__PURE__ */ e(
        Oe,
        {
          ...P,
          transaction: !n.balanceAccount && O ? { ...n, balanceAccount: O } : { ...n },
          transactionNavigator: W,
          extraFields: s,
          children: [
            /* @__PURE__ */ e(X, { className: Re, children: /* @__PURE__ */ e(Ne, { transaction: n, refundedState: Z }) }),
            /* @__PURE__ */ e(_e, {})
          ]
        }
      ) });
    case a.REFUND:
      return /* @__PURE__ */ e(Y, { renderViewActionButtons: C, children: /* @__PURE__ */ e(
        Ce,
        {
          ...P,
          availableAmount: J,
          currency: Q,
          refundMode: T,
          refreshTransaction: p,
          transactionId: n.id,
          children: [
            /* @__PURE__ */ e(he, {}),
            z && /* @__PURE__ */ e(be, {}),
            T === I.FULL_AMOUNT && /* @__PURE__ */ e(De, {}),
            (T === I.PARTIAL_AMOUNT || T === I.PARTIAL_LINE_ITEMS) && /* @__PURE__ */ e(Ie, { locale: r.locale }),
            R && /* @__PURE__ */ e(
              N,
              {
                variant: D.TIP,
                type: R.type,
                description: R.description
              }
            )
          ]
        }
      ) });
    case a.REFUND_SUCCESS:
      return /* @__PURE__ */ e(
        $,
        {
          renderIcon: () => /* @__PURE__ */ e(x, { name: "checkmark-circle-fill", className: L(V, Ae) }),
          title: r.get("refundActionSuccessTitle"),
          subtitle: r.get("refundActionSuccessSubtitle"),
          action: () => /* @__PURE__ */ e(H, { variant: k.SECONDARY, onClick: oe, children: r.get("goBack") })
        }
      );
    case a.REFUND_ERROR:
      return /* @__PURE__ */ e(
        $,
        {
          renderIcon: () => /* @__PURE__ */ e(x, { name: "cross-circle-fill", className: L(V, Te) }),
          title: r.get("refundActionErrorTitle"),
          subtitle: r.get("refundActionErrorSubtitle"),
          action: () => /* @__PURE__ */ e(H, { variant: k.SECONDARY, onClick: p, children: r.get("goBack") })
        }
      );
    default:
      return null;
  }
}, mt = Be;
export {
  Be as TransactionDataContent,
  mt as default
};
