import { jsx as E } from "../../../../../external/preact/jsx-runtime/dist/jsxRuntime.module.js";
import { memo as F } from "../../../../../external/preact/compat/dist/compat.module.js";
import { createContext as M } from "../../../../../external/preact/dist/preact.module.js";
import { useContext as N } from "../../../../../external/preact/hooks/dist/hooks.module.js";
import { REFUND_REASONS as U } from "../constants.js";
import { useRefundContextActions as _ } from "./hooks/useRefundContextActions.js";
import { useRefundContextAmount as g } from "./hooks/useRefundContextAmount.js";
import { useRefundContextLineItems as O } from "./hooks/useRefundContextLineItems.js";
import { useRefundContextReason as S } from "./hooks/useRefundContextReason.js";
import Y from "../../../../../hooks/useMutation/useMutation.js";
import { RefundMode as h } from "../types.js";
import { useAuthContext as j } from "../../../../../core/Auth/context.js";
import { EMPTY_ARRAY as f } from "../../../../../utils/value/constants.js";
import { noop as t } from "../../../../../utils/common.js";
const d = M({
  amount: 0,
  availableAmount: 0,
  availableItems: f,
  clearItems: t,
  currency: "",
  interactionsDisabled: !1,
  items: f,
  primaryAction: t,
  refundMode: h.FULL_AMOUNT,
  refundReason: U[0],
  secondaryAction: t,
  setAmount: t,
  setRefundReason: t,
  transactionId: "",
  updateItems: t
}), $ = F(
  ({
    availableAmount: s,
    children: c,
    currency: e,
    lineItems: p,
    refreshTransaction: R,
    refundMode: n,
    setActiveView: A,
    setPrimaryAction: l,
    setSecondaryAction: x,
    transactionId: r
  }) => {
    const { isLoading: m, mutate: C } = Y({ queryFn: j().endpoints.initiateRefund }), { availableItems: I, clearItems: v, items: a, updateItems: T } = O({ currency: e, lineItems: p }), o = m, [i, b] = g({ availableAmount: s, currency: e, interactionsDisabled: o, items: a, refundMode: n }), [u, y] = S({ interactionsDisabled: o, refundMode: n }), { value: L } = i, { primaryAction: P, secondaryAction: D } = _({
      interactionsDisabled: o,
      refreshTransaction: R,
      refundAmount: i,
      refundInProgress: m,
      refundReason: u,
      refundTransaction: C,
      setActiveView: A,
      setPrimaryAction: l,
      setSecondaryAction: x,
      transactionId: r
    });
    return /* @__PURE__ */ E(
      d.Provider,
      {
        value: {
          amount: L,
          availableAmount: s,
          availableItems: I,
          clearItems: v,
          currency: e,
          interactionsDisabled: o,
          items: a,
          primaryAction: P,
          refundMode: n,
          refundReason: u,
          secondaryAction: D,
          setAmount: b,
          setRefundReason: y,
          transactionId: r,
          updateItems: T
        },
        children: c
      }
    );
  }
), tt = () => N(d);
export {
  $ as TransactionRefundProvider,
  tt as default,
  tt as useTransactionRefundContext
};
