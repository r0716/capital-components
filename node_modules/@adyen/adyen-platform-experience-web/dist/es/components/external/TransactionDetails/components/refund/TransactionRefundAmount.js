import { jsx as t } from "../../../../../external/preact/jsx-runtime/dist/jsxRuntime.module.js";
import { TX_DATA_CONTAINER as U, TX_DATA_INPUT_HEAD as S, TX_DATA_INPUT_CONTAINER as $, TX_DATA_INPUT_CONTAINER_SHORT as B, TX_DATA_INPUT_CONTAINER_TEXT as q, TX_DATA_INPUT_CONTAINER_WITH_ERROR as H, TX_DATA_INPUT as L } from "../constants.js";
import M from "classnames";
import { useState as R, useMemo as V, useRef as v } from "../../../../../external/preact/hooks/dist/hooks.module.js";
import C from "../../../../../core/Context/useCoreContext.js";
import Y from "../../../../internal/SVGIcons/CloseCircle.js";
import j from "../../../../internal/FormFields/InputBase.js";
import h from "../../../../internal/Typography/Typography.js";
import { TypographyElement as b, TypographyVariant as D } from "../../../../internal/Typography/types.js";
import { getDecimalAmount as w, getDivider as W } from "../../../../../core/Localization/amount/amount-util.js";
import { ARIA_ERROR_SUFFIX as k } from "../../../../../core/Errors/constants.js";
import { TagVariant as z } from "../../../../internal/Tag/types.js";
import { Tag as G } from "../../../../internal/Tag/Tag.js";
import { useTransactionRefundContext as O } from "../../context/refund/context.js";
import { uniqueId as E } from "../../../../../utils/random/uniqueId.js";
import { boolOrFalse as J } from "../../../../../utils/value/bool.js";
const P = (r, n) => w(r, n).toFixed(_(n)), _ = (r) => Math.log10(W(r)), x = ({
  currency: r,
  disabled: n,
  errorMessage: e,
  errorMessageArg: l,
  onInput: A,
  value: T
}) => {
  const { i18n: a } = C(), i = v(E()), m = v(E()), p = e ? l ? a.get(e, { values: { amount: l } }) : a.get(e) : "";
  return /* @__PURE__ */ t("div", { className: U, children: [
    /* @__PURE__ */ t("div", { className: S, children: /* @__PURE__ */ t("div", { id: m.current, children: /* @__PURE__ */ t(h, { el: b.SPAN, variant: D.BODY, stronger: !0, children: a.get("refundAmount") }) }) }),
    /* @__PURE__ */ t(
      "div",
      {
        className: M({
          [$]: !0,
          [B]: !0,
          [q]: !0,
          [H]: !!e
        }),
        children: [
          /* @__PURE__ */ t("label", { htmlFor: i.current, "aria-labelledby": m.current, children: [
            r && /* @__PURE__ */ t(G, { label: r, variant: z.DEFAULT }),
            /* @__PURE__ */ t(
              j,
              {
                min: 0,
                type: "number",
                className: L,
                disabled: J(n),
                lang: a.locale,
                onInput: A,
                value: T,
                uniqueId: i.current
              }
            )
          ] }),
          e && /* @__PURE__ */ t("div", { className: "adyen-pe-input__refund-invalid-value", id: `${i.current}${k}`, children: [
            /* @__PURE__ */ t(Y, {}),
            /* @__PURE__ */ t(h, { el: b.SPAN, variant: D.BODY, children: p })
          ] })
        ]
      }
    )
  ] });
}, At = () => {
  const { availableAmount: r, currency: n } = O();
  return /* @__PURE__ */ t(x, { currency: n, errorMessage: null, value: P(r, n), disabled: !0 });
}, Tt = ({ locale: r }) => {
  const { availableAmount: n, currency: e, interactionsDisabled: l, setAmount: A } = O(), [T, a] = R(null), [i, m] = R(`${P(n, e)}`), { i18n: p } = C(), y = V(() => {
    const s = _(e);
    return (o) => Math.trunc(+`${parseFloat(o)}e${s}`) || 0;
  }, [e]), X = (s) => {
    var I;
    let o = s.currentTarget.value.trim();
    const c = y(o);
    let u = null;
    c || o ? (c < 0 && (u = "noNegativeNumbersAllowed"), c > n && (u = "refundAmount.excess")) : u = "refundAmount.required";
    const N = ((I = 1.1.toLocaleString(r).match(/\d(.*?)\d/)) == null ? void 0 : I[1]) || ".", f = o.split(N);
    if (f.length === 2) {
      const g = _(e), F = f[0];
      let d = f[1];
      d.length >= g && (d = d.substring(0, g), o = F + N + d, s.currentTarget.value = o);
    }
    m(o), a(u), A(u ? 0 : c);
  };
  return /* @__PURE__ */ t(
    x,
    {
      currency: e,
      errorMessage: T,
      errorMessageArg: p.amount(n, e),
      onInput: X,
      value: i,
      disabled: l
    }
  );
};
export {
  At as TransactionRefundFullAmountInput,
  Tt as TransactionRefundPartialAmountInput
};
