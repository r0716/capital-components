import { jsx as P } from "../../../../../external/preact/jsx-runtime/dist/jsxRuntime.module.js";
import { RangeSelection as w } from "./RangeSelection.js";
import { useState as T, useMemo as z, useCallback as E } from "../../../../../external/preact/hooks/dist/hooks.module.js";
import { PopoverContainerSize as B } from "../../../Popover/types.js";
import D from "../../../../../core/Context/useCoreContext.js";
import { AMOUNT_MULTIPLIER as L } from "./constants.js";
import F from "../BaseFilter/BaseFilter.js";
import { isUndefined as f } from "../../../../../utils/value/is.js";
import { EMPTY_OBJECT as O } from "../../../../../utils/value/constants.js";
const G = ({ updateFilters: $, selectedCurrencies: t, availableCurrencies: m, ...x }) => {
  const { i18n: g } = D(), [y, U] = T(), [p, h] = T(), M = z(() => (t == null ? void 0 : t.length) === 1 || (m == null ? void 0 : m.length) === 1, [m == null ? void 0 : m.length, t == null ? void 0 : t.length]), S = E(
    (n, o) => {
      const A = (t == null ? void 0 : t[0]) || (m == null ? void 0 : m[0]), I = o && A ? {
        style: "currency",
        currency: A,
        currencyDisplay: "symbol"
      } : void 0;
      return n.toLocaleString(g.locale, I);
    },
    [m, g, t]
  ), V = E(
    (n) => {
      const { minAmount: o, maxAmount: A } = n ?? O;
      U({ minAmount: o, maxAmount: A }), f(o) && f(A) && h(void 0), $({
        minAmount: f(o) ? void 0 : String(Math.round(o * L)),
        maxAmount: f(A) ? void 0 : String(Math.round(A * L))
      });
    },
    [$]
  );
  if (y && (y.minAmount || y.maxAmount)) {
    const { minAmount: n, maxAmount: o } = y ?? {};
    !f(n) && !f(o) && n <= o ? h(
      `${S(n, M)} ${g.get("to").toLowerCase()} ${S(o, M)}`
    ) : !f(n) && f(o) && n >= 0 ? h(`${g.get("from")} ${S(n, M)}`) : f(n) && !f(o) ? h(`${g.get("to")} ${S(o, M)}`) : h(void 0);
  }
  return /* @__PURE__ */ P(
    F,
    {
      ...x,
      updateFilters: $,
      minAmount: x.minAmount,
      maxAmount: x.maxAmount,
      onChange: V,
      value: p,
      label: p || x.label,
      type: "text",
      containerSize: B.MEDIUM,
      selectedCurrencies: t,
      availableCurrencies: m,
      render: w
    }
  );
};
export {
  G as AmountFilter
};
