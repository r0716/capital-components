import { useReducer as I, useCallback as a } from "../../../../external/preact/hooks/dist/hooks.module.js";
import p from "../../../../hooks/useReflex.js";
import { InteractionKeyCode as s } from "../../../types.js";
import { INITIAL_STATE as R } from "../DataGrid.js";
const T = ({ totalRows: x }) => {
  const [i, o] = I(
    (e, t) => {
      const n = x;
      if (n > 1) {
        const d = t.index;
        if (d < n && d >= 0)
          return t.type === "ACTIVE" ? Object.freeze({ ...e, index: t.index ?? 0, activeIndex: t.index }) : Object.freeze({ ...e, index: t.index ?? 0, activeIndex: -1 });
      }
      return e;
    },
    R
  ), r = p(
    a(
      (e) => {
        var n;
        if (!(e instanceof Element))
          return;
        const t = Number((n = e.dataset) == null ? void 0 : n.index);
        i.activeIndex === -1 && t === 0 || t === i.index ? e.setAttribute("tabindex", "0") : e.setAttribute("tabindex", "-1"), t === i.activeIndex && (e == null || e.focus());
      },
      [i.activeIndex, i.index]
    )
  ), c = a(
    (e) => {
      var n, d;
      if (!(((n = e.target) == null ? void 0 : n.getAttribute("role")) === "row")) {
        e.code === s.ARROW_LEFT && o({
          type: "ACTIVE",
          index: i.index
        });
        return;
      }
      switch (e.code) {
        case s.ARROW_DOWN:
        case s.ARROW_UP:
          o({
            type: "ACTIVE",
            index: e.code === s.ARROW_DOWN ? i.index + 1 : i.index - 1
          });
          break;
        case s.HOME:
          o({
            type: "ACTIVE",
            index: 0
          });
          break;
        case s.END:
          o({
            type: "ACTIVE",
            index: x - 1
          });
          break;
        case s.ENTER:
          (d = e.currentTarget) == null || d.click();
          break;
        default:
          return;
      }
      e.stopPropagation();
    },
    [x, i.index]
  ), f = a(
    (e) => (t) => {
      var d;
      (!(((d = t.target) == null ? void 0 : d.localName) === "tr") || i.index === -1) && o({ type: "CURRENT", index: e });
    },
    [i.index]
  );
  return { listeners: { onKeyDownCapture: c, onFocusCapture: f }, ref: r, activeIndex: i.activeIndex, currentIndex: i.index };
};
export {
  T as useInteractiveDataGrid
};
