import { useState as i, useRef as k, useMemo as c, useCallback as C } from "../../../../../external/preact/hooks/dist/hooks.module.js";
import I from "../../../../../core/Context/useCoreContext.js";
import R from "../../../Calendar/calendar/timerange/presets/lastNDays.js";
import N from "../../../Calendar/calendar/timerange/presets/thisWeek.js";
import q from "../../../Calendar/calendar/timerange/presets/lastWeek.js";
import A from "../../../Calendar/calendar/timerange/presets/thisMonth.js";
import E from "../../../Calendar/calendar/timerange/presets/lastMonth.js";
import K from "../../../Calendar/calendar/timerange/presets/yearToDate.js";
const X = () => Object.freeze({
  "rangePreset.last7Days": R(7),
  "rangePreset.last30Days": R(30),
  "rangePreset.thisWeek": N(),
  "rangePreset.lastWeek": q(),
  "rangePreset.thisMonth": A(),
  "rangePreset.lastMonth": E(),
  "rangePreset.yearToDate": K()
}), Y = ({
  now: a = Date.now(),
  options: n,
  selectedOption: m,
  timezone: u
}) => {
  const { i18n: l } = I(), [W, h] = i(), [j, S] = i(), [f, g] = i(), d = k(), y = k(), [e, D, s] = c(() => {
    const o = l.get("rangePreset.custom"), t = Object.keys(n), r = Object.freeze(t.map((O) => l.get(O)));
    return [o, (O, F = r) => {
      const v = F.findIndex((z) => z === O);
      return n[t[v]];
    }, r];
  }, [l, n]), [P, T] = i(m === e), b = c(() => Object.freeze([...s, e]), [e, s]), M = c(
    () => P ? b : s,
    [P, s, b]
  ), p = C(
    (o) => {
      const t = D(o, s);
      t && (h(t.from), S(t.to), T(!1), g(o));
    },
    [e, D, f, s]
  ), x = C(() => {
    h(void 0), S(void 0), T(!0), g(e);
  }, [e]);
  return c(() => {
    m === e ? g(e) : p(m);
  }, []), c(() => {
    var o;
    if (d.current !== a || y.current !== u) {
      const t = Object.values(n);
      t.forEach((r) => {
        r.now = a, r.timezone = u;
      }), d.current = a, y.current = (o = t[0]) == null ? void 0 : o.timezone, p(f);
    }
  }, [a, u, n]), {
    customSelection: x,
    from: W,
    onSelection: p,
    options: M,
    selectedOption: f,
    to: j
  };
};
export {
  Y as default,
  X as getTimeRangeSelectionDefaultPresetOptions,
  Y as useTimeRangeSelection
};
