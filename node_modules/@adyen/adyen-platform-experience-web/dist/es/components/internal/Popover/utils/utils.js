import { struct as f, structFrom as m } from "../../../../utils/struct/main.js";
import { enumerable as o } from "../../../../utils/struct/property.js";
import { isUndefined as d } from "../../../../utils/value/is.js";
const u = (() => {
  const t = /* @__PURE__ */ new WeakMap(), s = f({
    remove: o(function() {
      i(this.observerCallback);
    })
  }), n = (e) => {
    let r = t.get(e);
    if (d(r)) {
      const v = new IntersectionObserver(
        (c) => {
          c.forEach((b) => {
            e && e(b);
          });
        },
        { root: null, rootMargin: "", threshold: [1] }
      );
      r = m(s, {
        observerCallback: o(e),
        observer: o(v)
      }), t.set(e, r);
    }
    return r;
  }, i = (e) => {
    const r = t.get(e);
    r == null || r.observer.disconnect(), t.delete(e);
  };
  return n;
})(), h = u;
export {
  h as default
};
