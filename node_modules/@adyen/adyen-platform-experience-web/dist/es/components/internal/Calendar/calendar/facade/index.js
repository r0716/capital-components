import a from "./Calendar.js";
import { CONTROLS_ALL as t, CONTROLS_MINIMAL as O, CONTROLS_NONE as i, SELECT_ONE as n, SELECT_MANY as E, SELECT_NONE as c, RANGE_FROM as u, RANGE_TO as m } from "../constants.js";
import s, { UNBOUNDED_SLICE as L, sinceNow as f, untilNow as _ } from "../timeslice/index.js";
import { struct as l } from "../../../../../utils/struct/main.js";
import { isNumber as v, isFunction as d } from "../../../../../utils/value/is.js";
import { ALREADY_RESOLVED_PROMISE as p } from "../../../../../utils/async/constants.js";
import { enumerable as o } from "../../../../../utils/struct/property.js";
const A = (() => Object.defineProperties((e) => {
  const { grid: r, kill: N } = new a();
  return v(e) ? r.config({ blocks: e }) : d(e) ? p.then(() => {
    r.config.watch = e;
  }) : r.config(e), l({
    grid: o(r),
    kill: o(N)
  });
}, {
  controls: {
    value: l({
      ALL: { value: t },
      MINIMAL: { value: O },
      NONE: { value: i }
    })
  },
  highlight: {
    value: l({
      ONE: { value: n },
      MANY: { value: E },
      NONE: { value: c }
    })
  },
  slice: {
    value: Object.defineProperties(s.bind(null), {
      FROM: { value: u },
      TO: { value: m },
      UNBOUNDED: { value: L },
      SINCE_NOW: { get: f },
      UNTIL_NOW: { get: _ }
    })
  }
}))(), D = A;
export {
  D as default
};
