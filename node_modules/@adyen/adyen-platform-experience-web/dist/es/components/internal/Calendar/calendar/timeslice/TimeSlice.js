var c = (i, t, s) => {
  if (!t.has(i))
    throw TypeError("Cannot " + s);
};
var e = (i, t, s) => (c(i, t, "read from private field"), s ? s.call(i) : t.get(i)), n = (i, t, s) => {
  if (t.has(i))
    throw TypeError("Cannot add the same private member more than once");
  t instanceof WeakSet ? t.add(i) : t.set(i, s);
}, f = (i, t, s, T) => (c(i, t, "write to private field"), T ? T.call(i, s) : t.set(i, s), s);
var u = (i, t, s, T) => ({
  set _(O) {
    f(i, t, O, s);
  },
  get _() {
    return e(i, t, T);
  }
});
import { RANGE_FROM as l, RANGE_TO as d } from "../constants.js";
import { computeTimestampOffset as o, getEdgesDistance as _ } from "../utils.js";
var p, h, m, a, r;
class w {
  constructor(...t) {
    n(this, p, 1 / 0);
    n(this, h, 1 / 0);
    n(this, m, -1 / 0);
    n(this, a, 0);
    n(this, r, 0);
    if (t.length >= 3) {
      let s = new Date(t[1]).getTime();
      if (typeof t[2] != "symbol")
        f(this, m, s || e(this, m)), f(this, h, new Date(t[2]).getTime() || e(this, h)), e(this, h) < e(this, m) && ([u(this, h)._, u(this, m)._] = [e(this, m), e(this, h)]), f(this, r, o(e(this, m), t[0])), f(this, a, o(e(this, h), t[0])), f(this, p, _(e(this, m), e(this, h), t[0]) + 1);
      else if (!isNaN(s))
        switch (t[2]) {
          case d:
            f(this, h, s), f(this, a, o(e(this, h), t[0]));
            break;
          case l:
          default:
            f(this, m, s), f(this, r, o(e(this, m), t[0]));
            break;
        }
    }
  }
  get numberOfMonths() {
    return e(this, p);
  }
  get endTimestamp() {
    return e(this, h);
  }
  get endTimestampOffset() {
    return e(this, a);
  }
  get startTimestamp() {
    return e(this, m);
  }
  get startTimestampOffset() {
    return e(this, r);
  }
}
p = new WeakMap(), h = new WeakMap(), m = new WeakMap(), a = new WeakMap(), r = new WeakMap();
export {
  w as default
};
