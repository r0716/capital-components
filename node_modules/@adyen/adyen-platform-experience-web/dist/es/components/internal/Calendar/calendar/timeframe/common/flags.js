import { TimeFlag as s } from "../../types.js";
import { struct as i, withFreezeProxyHandlers as l } from "../../../../../../utils/struct/main.js";
import { isString as u } from "../../../../../../utils/value/is.js";
const f = (() => {
  const r = {}, n = Object.keys(s).filter((e) => isNaN(+e)), c = (e) => e !== "ALL" && u(e) && n.includes(e);
  return (e) => {
    const t = e & s.ALL;
    return r[t] || (r[t] = new Proxy(
      i({
        valueOf: { value: () => t }
      }),
      l({
        get: (o, a) => {
          switch (a) {
            case "valueOf":
              return o.valueOf;
            case Symbol.toStringTag:
              return "_";
            default:
              if (!c(a))
                return;
          }
          return t & s[a] ? 1 : void 0;
        }
      })
    )), r[t];
  };
})(), F = f;
export {
  F as default
};
