import { useMemo as c, useRef as g, useState as d } from "../../../../external/preact/hooks/dist/hooks.module.js";
import { getTimezoneOffsetFromFormattedDateString as l, getGMTSuffixForTimezoneOffset as E } from "../../../../core/Localization/datetime/restamper/utils.js";
import M from "../../../../core/Localization/datetime/restamper/restamper.js";
import _ from "../../../../primitives/time/clock/main.js";
import { isWatchlistUnsubscribeToken as G } from "../../../../primitives/reactive/watchlist/main.js";
import { boolOrFalse as O } from "../../../../utils/value/bool.js";
import { noop as a } from "../../../../utils/common.js";
import { EMPTY_OBJECT as S, EMPTY_ARRAY as R } from "../../../../utils/value/constants.js";
const { getTimezoneTime: U, getUsedTimezone: $ } = (() => {
  const n = /\d{2}:\d{2}(?=:\d{2}(?:\.\d+)?\s+([AP]M))/i, m = /^GMT|0(?=\d:00)|:00/g, e = M();
  return { getTimezoneTime: (t, i = Date.now()) => {
    e.tz = t;
    const { formatted: o } = e(i), [f = "", s = ""] = (o == null ? void 0 : o.match(n)) ?? R, u = l(o), z = `${f}${s && ` ${s}`}`, p = E(u).replace(m, "");
    return [z, p];
  }, getUsedTimezone: (t) => (e.tz = t, e.tz.current) };
})(), A = ({ timezone: n, withClock: m = !1 } = S) => {
  const e = c(() => O(m), [m]), r = c(() => $(n), [n]), T = g(a), [t, i] = d(Date.now()), [o, f] = c(() => U(r, t), [t, r]);
  return c(() => {
    T.current(), T.current = e ? _.subscribe((s) => {
      G(s) || i(s.now);
    }) : a;
  }, [i, e]), { clockTime: o, GMTOffset: f, timestamp: t, timezone: r };
}, P = A;
export {
  P as default,
  U as getTimezoneTime,
  $ as getUsedTimezone
};
