import { jsx as o } from "../../../external/preact/jsx-runtime/dist/jsxRuntime.module.js";
import U from "./hooks/useButton.js";
import { ICON_BUTTON_CLASSNAME as S, BUTTON_CONDENSED_CLASSNAME as d, BUTTON_FULL_WIDTH_CLASSNAME as h, BUTTON_LOADING_CLASSNAME as y, ICON_BUTTON_CONTENT_CLASSNAME as H, BUTTON_ICON_LEFT_CLASSNAME as I, BUTTON_LABEL_CLASSNAME as D, BUTTON_ICON_RIGHT_CLASSNAME as g, DEFAULT_BUTTON_CLASSNAME as x } from "./constants.js";
import { TypographyElement as F, TypographyVariant as P } from "../Typography/types.js";
import R from "../Typography/Typography.js";
import { useMemo as m } from "../../../external/preact/hooks/dist/hooks.module.js";
import { ButtonVariant as V } from "./types.js";
import "./Button.scss.js";
import $ from "classnames";
import { fixedForwardRef as b } from "../../../utils/preact/fixedForwardRef.js";
import { parseClassName as w } from "../../../utils/preact/className.js";
import { parseBooleanProp as k } from "../../../utils/preact/props.js";
import v from "../Spinner/Spinner.js";
import { Fragment as G } from "../../../external/preact/dist/preact.module.js";
const Y = (r) => r && r.current instanceof HTMLAnchorElement, j = (r) => r && r.current instanceof HTMLButtonElement;
function z({
  variant: r = V.PRIMARY,
  disabled: t = !1,
  onClick: f,
  classNameModifiers: L = [],
  iconLeft: s,
  iconRight: l,
  type: C = "button",
  children: N,
  className: p,
  iconButton: a = !1,
  fullWidth: i,
  condensed: A,
  href: c,
  state: e = "default",
  ...E
}, n) {
  const B = m(() => w("", p) || "", [p]), M = m(() => k(t), [t]), { classes: T, click: O } = U(B, [...L, r], x, M, f), _ = m(
    () => ({
      className: $(a ? `${S} ${T}` : T, {
        [S]: a,
        [d]: A,
        [h]: i,
        [y]: e === "loading"
      }),
      disabled: t || e === "loading",
      ...E
    }),
    [T, A, t, i, a, E, e]
  ), u = m(
    () => a ? /* @__PURE__ */ o("div", { className: `${H}`, children: N }) : /* @__PURE__ */ o(G, { children: [
      e === "loading" && /* @__PURE__ */ o(v, { size: "x-small" }),
      s && /* @__PURE__ */ o("span", { className: I, children: s }),
      /* @__PURE__ */ o(R, { className: D, el: F.SPAN, variant: P.BODY, children: N }),
      l && /* @__PURE__ */ o("span", { className: g, children: l })
    ] }),
    [N, a, s, l, e]
  );
  return c ? (n && j(n) && console.warn("Button ref should be of type HTMLAnchorElement"), /* @__PURE__ */ o("a", { ..._, href: c, ref: n, children: u })) : (n && Y(n) && console.warn("Button ref should be of type HTMLButtonElement"), /* @__PURE__ */ o("button", { ..._, ref: n, type: C, onClick: O, children: u }));
}
const so = b(z);
export {
  so as default
};
